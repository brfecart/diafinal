{"file_contents":{"README.md":{"content":"# finalfecartparteum","size_bytes":20},"SCCP1910/README.md":{"content":"# SCCP1910","size_bytes":10},"SCCP1910/replit.md":{"content":"# Overview\n\nMandalaMind is a biometric mandala generation application that creates personalized spiritual artwork based on real-time brainwave data from EEG devices and voice input. The system captures EEG signals from NeuroSky headsets, processes voice input for meditation intentions, and uses AI to generate unique mandala artwork that reflects the user's mental state and spiritual goals.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React with TypeScript**: Modern React application using functional components, hooks, and strict TypeScript configuration for type safety\n- **Vite Build System**: Fast development server with hot module replacement and optimized production builds\n- **Shadcn/ui Component Library**: Comprehensive UI components built on Radix UI primitives with dark theme support and accessibility features\n- **TailwindCSS**: Utility-first CSS framework with custom color variables, responsive design, and dark mode theming\n- **Wouter**: Lightweight client-side routing solution for SPA navigation\n- **React Query**: Server state management, caching, and synchronization for API interactions with automatic background refetching\n- **Canvas Visualization**: HTML5 Canvas for real-time EEG waveform rendering and brainwave visualization with smooth animations\n\n## Backend Architecture\n- **Express.js Server**: RESTful API server with TypeScript support, comprehensive error handling, and middleware stack\n- **WebSocket Integration**: Real-time bidirectional communication for streaming EEG data and device status updates\n- **Modular Service Architecture**: Separate services for NeuroSky hardware integration, Gemini AI processing, and OpenAI fallback\n- **In-Memory Storage**: Simple storage implementation with well-defined interfaces for future database integration\n- **Shared Schema System**: Common TypeScript types and Zod validation schemas shared between frontend and backend\n\n## Database Design\n- **Drizzle ORM**: Type-safe database toolkit configured for PostgreSQL with schema migrations and query building\n- **Session Management**: User sessions track complete meditation experiences with brainwave data and generated content\n- **Mandala Records**: Generated artwork storage with associated prompts, timestamps, and biometric context data\n- **EEG Data Storage**: Time-series brainwave data with attention, meditation, and signal quality metrics\n- **Relational Structure**: Proper foreign key relationships between sessions, mandalas, and EEG readings for data integrity\n\n## Core Features\n- **Real-Time Biometric Monitoring**: Continuous EEG data capture from NeuroSky devices with WebSocket streaming to frontend\n- **Voice Recognition**: Browser-based Web Speech API for meditation prompts and intention capture with Portuguese language support\n- **AI-Powered Art Generation**: Primary Gemini AI integration with OpenAI fallback for intelligent mandala prompt creation based on biometric data\n- **Device Management**: NeuroSky headset connection, status monitoring, demo mode support, and ThinkGear Connector integration\n- **Mandala Gallery**: Image display, download functionality, QR code sharing, and generated artwork management\n\n## Integration Patterns\n- **Hardware Integration**: Serial/USB communication with NeuroSky devices via ThinkGear Connector local WebSocket server\n- **AI Service Integration**: Primary Gemini AI with OpenAI fallback, retry logic, and error handling for prompt generation\n- **Real-Time Data Flow**: WebSocket-based streaming architecture for continuous biometric feedback and device status\n- **Responsive Design**: Mobile-first approach with adaptive layouts, touch-friendly interactions, and cross-device compatibility\n\n# External Dependencies\n\n## Hardware Integration\n- **NeuroSky ThinkGear**: EEG headset connectivity via serial/USB interface for brainwave capture and monitoring\n- **ThinkGear Connector**: Local WebSocket server (port 13854) for device communication and data streaming\n\n## AI Services\n- **Google Gemini AI**: Primary AI service using Gemini 2.5 Flash model for intelligent mandala prompt generation\n- **OpenAI**: Fallback AI service with GPT-5 model for prompt generation when Gemini is unavailable\n- **Web Speech API**: Browser-native speech recognition for voice input and meditation intention capture\n\n## Database & Hosting\n- **Neon Database**: Serverless PostgreSQL database for production data storage\n- **Replit Integration**: Development environment with custom Vite plugins and runtime error handling","size_bytes":4578},"attached_assets/README_1758042279716.md":{"content":"# fecart-teste-3","size_bytes":16},"attached_assets/replit_1758042279717.md":{"content":"# Overview\n\nThis is a biometric mandala generation application that creates personalized spiritual artwork based on real-time brainwave data from EEG devices and voice input. The system captures EEG signals from NeuroSky devices, processes voice transcripts through speech recognition, and uses AI services to generate custom mandala prompts. The application combines meditation technology with artistic expression to create meaningful spiritual artwork that reflects the user's mental state and intentions.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React with TypeScript**: Modern React application using functional components, hooks, and strict TypeScript configuration for type safety\n- **Vite Build System**: Fast development server with hot module replacement and optimized production builds\n- **Shadcn/ui Component Library**: Comprehensive UI components built on Radix UI primitives with dark theme support and accessibility features\n- **TailwindCSS**: Utility-first CSS framework with custom color variables, responsive design, and dark mode theming\n- **Wouter**: Lightweight client-side routing solution for SPA navigation\n- **React Query**: Server state management, caching, and synchronization for API interactions with automatic background refetching\n- **Canvas Visualization**: HTML5 Canvas for real-time EEG waveform rendering and brainwave visualization with smooth animations\n\n## Backend Architecture\n- **Express.js Server**: RESTful API server with TypeScript support, comprehensive error handling, and middleware stack\n- **WebSocket Integration**: Real-time bidirectional communication for streaming EEG data and device status updates\n- **Modular Service Architecture**: Separate services for NeuroSky hardware integration, Gemini AI processing, and OpenAI fallback\n- **In-Memory Storage**: Simple storage implementation with well-defined interfaces for future database integration\n- **Shared Schema System**: Common TypeScript types and Zod validation schemas shared between frontend and backend\n\n## Database Design\n- **Drizzle ORM**: Type-safe database toolkit configured for PostgreSQL with schema migrations and query building\n- **Session Management**: User sessions track complete meditation experiences with brainwave data and generated content\n- **Mandala Records**: Generated artwork storage with associated prompts, timestamps, and biometric context data\n- **EEG Data Storage**: Time-series brainwave data with attention, meditation, and signal quality metrics\n- **Relational Structure**: Proper foreign key relationships between sessions, mandalas, and EEG readings for data integrity\n\n## Core Features\n- **Real-Time Biometric Monitoring**: Continuous EEG data capture from NeuroSky devices with WebSocket streaming to frontend\n- **Voice Recognition**: Browser-based Web Speech API for meditation prompts and intention capture with Portuguese language support\n- **AI-Powered Art Generation**: Primary Gemini AI integration with OpenAI fallback for intelligent mandala prompt creation based on biometric data\n- **Device Management**: NeuroSky headset connection, status monitoring, demo mode support, and ThinkGear Connector integration\n- **Mandala Gallery**: Image display, download functionality, QR code sharing, and generated artwork management\n\n## Integration Patterns\n- **Hardware Integration**: Serial/USB communication with NeuroSky devices via ThinkGear Connector local WebSocket server\n- **AI Service Integration**: Primary Gemini AI with OpenAI fallback, retry logic, and error handling for prompt generation\n- **Real-Time Data Flow**: WebSocket-based streaming architecture for continuous biometric feedback and device status\n- **Responsive Design**: Mobile-first approach with adaptive layouts, touch-friendly interactions, and cross-device compatibility\n\n# External Dependencies\n\n## Hardware Integration\n- **NeuroSky ThinkGear**: EEG headset connectivity via serial/USB interface for brainwave capture and monitoring\n- **ThinkGear Connector**: Local WebSocket server for device communication and data streaming\n\n## AI Services\n- **Google Gemini AI**: Primary AI service for mandala prompt generation using the latest Gemini 2.5 models\n- **OpenAI**: Fallback AI service for prompt generation when Gemini is unavailable\n\n## Cloud Services\n- **Neon Database**: PostgreSQL database hosting for production data storage\n- **Speech Recognition API**: Browser-based Web Speech API for voice input processing\n\n## Development Tools\n- **Replit Integration**: Development environment with hot reload and runtime error handling\n- **QR Code Generation**: Client-side QR code creation for mandala sharing functionality","size_bytes":4733},"SCCP1910/fecart-15-09/README.md":{"content":"# fecart-15-09","size_bytes":14},"SCCP1910/fecart-15-09/replit.md":{"content":"# Overview\n\nMandalaMind is a biometric mandala generation application that creates personalized spiritual artwork based on real-time brainwave data from EEG devices and voice input. The system captures EEG signals from NeuroSky headsets, processes voice transcripts through speech recognition, and uses AI to generate custom mandala prompts that are then converted into visual artwork. The application provides a complete meditation and artistic creation experience with real-time biometric feedback visualization.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React with TypeScript**: Modern React application using functional components, hooks, and strict TypeScript configuration\n- **Vite Build System**: Fast development server with hot module replacement and optimized production builds\n- **Shadcn/ui Component Library**: Comprehensive UI components built on Radix UI primitives with dark theme support\n- **TailwindCSS**: Utility-first CSS framework with custom color variables and responsive design\n- **Wouter**: Lightweight client-side routing solution\n- **React Query**: Server state management, caching, and synchronization for API interactions\n- **Canvas Visualization**: HTML5 Canvas for real-time EEG waveform rendering and brainwave visualization\n\n## Backend Architecture\n- **Express.js Server**: RESTful API server with TypeScript support and comprehensive error handling\n- **WebSocket Integration**: Real-time bidirectional communication for streaming EEG data and device status\n- **Modular Service Architecture**: Separate services for NeuroSky hardware integration and OpenAI processing\n- **In-Memory Storage**: Simple storage implementation with interface design for future database integration\n- **Shared Schema System**: Common TypeScript types and Zod validation schemas across frontend and backend\n\n## Database Design\n- **Drizzle ORM**: Type-safe database toolkit configured for PostgreSQL with schema migrations\n- **Session Management**: User sessions track complete meditation experiences with brainwave data\n- **Mandala Records**: Generated artwork with associated prompts, timestamps, and biometric context\n- **EEG Data Storage**: Time-series brainwave data with attention, meditation, and signal quality metrics\n- **Relational Structure**: Proper foreign key relationships between sessions, mandalas, and EEG readings\n\n## Core Features\n- **Real-Time Biometric Monitoring**: Continuous EEG data capture with WebSocket streaming to frontend\n- **Voice Recognition**: Browser-based speech-to-text API for meditation prompts and intentions\n- **AI-Powered Art Generation**: OpenAI GPT integration for intelligent mandala prompt creation based on biometric data\n- **Device Management**: NeuroSky headset connection, status monitoring, and demo mode support\n- **Mandala Gallery**: Image display, download functionality, and QR code sharing capabilities\n\n## Integration Patterns\n- **Hardware Integration**: Serial/USB communication with NeuroSky devices via ThinkGear Connector\n- **AI Service Integration**: OpenAI API calls with retry logic and fallback handling\n- **Real-Time Data Flow**: WebSocket-based streaming architecture for continuous biometric feedback\n- **Responsive Design**: Mobile-first approach with adaptive layouts and touch-friendly interactions\n\n# External Dependencies\n\n## Hardware Integration\n- **NeuroSky ThinkGear**: EEG headset connectivity via serial/USB interface for brainwave capture\n- **ThinkGear Connector**: Local WebSocket server running on port 13854 for device communication\n\n## AI and Language Services\n- **OpenAI API**: GPT-5 model for intelligent mandala prompt generation and natural language processing\n- **Browser Speech Recognition**: Web Speech API for voice-to-text transcription in Portuguese (pt-BR)\n\n## Database and Infrastructure\n- **PostgreSQL**: Primary database configured via Drizzle ORM with connection pooling\n- **Neon Database**: Serverless PostgreSQL provider with connection string configuration\n\n## Development and Build Tools\n- **Replit Integration**: Custom Vite plugins for Replit environment with runtime error overlays\n- **PostCSS and Autoprefixer**: CSS processing pipeline for cross-browser compatibility\n- **ESBuild**: Fast JavaScript bundling for production server builds","size_bytes":4342},"SCCP1910/fecart-15-09/MandalaMind/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"SCCP1910/fecart-15-09/MandalaMind/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"SCCP1910/fecart-15-09/MandalaMind/replit.md":{"content":"# Overview\n\nThis is a biometric mandala generation application that creates personalized spiritual artwork based on real-time brainwave data and voice input. The system captures EEG signals from NeuroSky devices, processes voice transcripts, and uses AI to generate unique mandalas that reflect the user's mental and emotional state. Built as a full-stack TypeScript application with real-time capabilities.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React with TypeScript**: Modern React application using functional components and hooks\n- **Vite Build System**: Fast development server and optimized production builds\n- **Shadcn/ui Components**: Comprehensive UI component library built on Radix UI primitives\n- **TailwindCSS**: Utility-first CSS framework with dark theme support\n- **React Query**: Server state management and caching for API interactions\n- **Wouter**: Lightweight client-side routing\n\n## Backend Architecture\n- **Express.js**: RESTful API server with TypeScript\n- **WebSocket Integration**: Real-time bidirectional communication for EEG data streaming\n- **Modular Service Architecture**: Separate services for NeuroSky integration and OpenAI processing\n- **In-Memory Storage**: Simple storage implementation with interface for future database integration\n- **Shared Schema**: Common TypeScript types and Zod validation schemas\n\n## Data Management\n- **Drizzle ORM**: Type-safe database toolkit configured for PostgreSQL\n- **Session-Based Architecture**: User sessions track brainwave data and generated mandalas\n- **Real-Time Data Flow**: Continuous EEG data capture with WebSocket streaming to frontend\n- **Structured Data Models**: Sessions, mandalas, and EEG data with proper relationships\n\n## Core Features\n- **Brainwave Visualization**: Real-time EEG waveform rendering with HTML5 Canvas\n- **Voice Recognition**: Browser-based speech-to-text for meditation prompts\n- **AI-Powered Generation**: OpenAI integration for intelligent mandala prompt creation\n- **Device Management**: NeuroSky headset connection and status monitoring\n- **Mandala Gallery**: Image display with download and sharing capabilities\n\n## Security & Performance\n- **Type Safety**: End-to-end TypeScript with strict configuration\n- **Error Handling**: Comprehensive error boundaries and API error management\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n- **Development Tooling**: Hot reload, runtime error overlays, and Replit integration\n\n# External Dependencies\n\n## Hardware Integration\n- **NeuroSky ThinkGear**: EEG headset connectivity via serial/USB interface\n- **ThinkGear Connector**: Local WebSocket server for device communication\n\n## AI Services\n- **OpenAI API**: GPT-5 model for intelligent prompt generation and DALL-E for image creation\n- **Speech Recognition API**: Browser-native Web Speech API for voice input\n\n## Database & Storage\n- **PostgreSQL**: Configured via Drizzle ORM for production data persistence\n- **Neon Database**: Serverless PostgreSQL provider integration\n\n## Development & Deployment\n- **Replit Platform**: Integrated development environment with deployment capabilities\n- **ESBuild**: Fast bundling for server-side code compilation\n- **PostCSS**: CSS processing with autoprefixer for browser compatibility","size_bytes":3347},"SCCP1910/fecart-15-09/MandalaMind/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"particle-float\": {\n          \"0%\": {\n            transform: \"translateY(100vh) translateX(0)\",\n            opacity: \"0\",\n          },\n          \"10%\": {\n            opacity: \"1\",\n          },\n          \"90%\": {\n            opacity: \"1\",\n          },\n          \"100%\": {\n            transform: \"translateY(-100px) translateX(100px)\",\n            opacity: \"0\",\n          },\n        },\n        pulse: {\n          \"0%, 100%\": { opacity: \"1\" },\n          \"50%\": { opacity: \"0.7\" },\n        },\n        float: {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n        \"record-pulse\": {\n          \"0%\": { transform: \"scale(1)\" },\n          \"50%\": { transform: \"scale(1.1)\" },\n          \"100%\": { transform: \"scale(1)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"particle-float\": \"particle-float 6s linear infinite\",\n        \"brain-wave\": \"pulse 2s infinite\",\n        floating: \"float 3s ease-in-out infinite\",\n        \"recording-pulse\": \"record-pulse 1.5s infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3774},"SCCP1910/fecart-15-09/MandalaMind/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    hmr: process.env.REPL_ID\n      ? { \n          protocol: \"wss\", \n          clientPort: 443,\n          host: process.env.REPLIT_DOMAINS?.split(',')[0] || \"localhost\"\n        }\n      : undefined,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1205},"SCCP1910/fecart-15-09/MandalaMind/server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Serve static assets (for generated mandala images)\napp.use('/attached_assets', express.static('attached_assets'));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2185},"SCCP1910/fecart-15-09/MandalaMind/server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { NeuroSkyService } from \"./services/neurosky\";\nimport { GeminiService } from \"./services/gemini\";\nimport { insertSessionSchema, insertMandalaSchema, type GenerateMandalaRequest, type BrainwaveData } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // Initialize services\n  const neuroskyService = new NeuroSkyService({ autoConnect: false });\n  const geminiService = new GeminiService();\n  \n  // WebSocket server for real-time EEG data streaming\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  const clients = new Set<WebSocket>();\n  \n  // WebSocket connection handling\n  wss.on('connection', (ws) => {\n    console.log('Client connected to WebSocket');\n    clients.add(ws);\n    \n    // Send current connection status\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify({\n        type: 'connection_status',\n        connected: neuroskyService.getConnectionStatus(),\n        currentData: neuroskyService.getCurrentData()\n      }));\n    }\n    \n    ws.on('message', async (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        switch (data.type) {\n          case 'connect_neurosky':\n            try {\n              await neuroskyService.connect();\n            } catch (error) {\n              ws.send(JSON.stringify({\n                type: 'error',\n                message: 'Failed to connect to NeuroSky device'\n              }));\n            }\n            break;\n            \n          case 'disconnect_neurosky':\n            neuroskyService.disconnect();\n            break;\n            \n          case 'enable_demo':\n            try {\n              // Disconnect any real connection first\n              if (neuroskyService.getConnectionStatus()) {\n                neuroskyService.disconnect();\n              }\n              \n              neuroskyService.enableDemoMode();\n              \n              ws.send(JSON.stringify({\n                type: 'demo_enabled',\n                message: 'Demo mode enabled - generating simulated brainwave data'\n              }));\n            } catch (error) {\n              ws.send(JSON.stringify({\n                type: 'error',\n                message: 'Failed to enable demo mode'\n              }));\n            }\n            break;\n            \n          case 'disable_demo':\n            try {\n              neuroskyService.disableDemoMode();\n              ws.send(JSON.stringify({\n                type: 'demo_disabled',\n                message: 'Demo mode disabled - ready for real NeuroSky connection'\n              }));\n            } catch (error) {\n              ws.send(JSON.stringify({\n                type: 'error',\n                message: 'Failed to disable demo mode'\n              }));\n            }\n            break;\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n    \n    ws.on('close', () => {\n      clients.delete(ws);\n      console.log('Client disconnected from WebSocket');\n    });\n    \n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      clients.delete(ws);\n    });\n  });\n  \n  // Broadcast function for real-time data\n  function broadcast(data: any) {\n    const message = JSON.stringify(data);\n    clients.forEach(client => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(message);\n      }\n    });\n  }\n  \n  // NeuroSky event handlers\n  neuroskyService.on('connected', () => {\n    broadcast({ type: 'neurosky_connected' });\n  });\n  \n  neuroskyService.on('disconnected', () => {\n    broadcast({ type: 'neurosky_disconnected' });\n  });\n  \n  neuroskyService.on('data', async (data: BrainwaveData) => {\n    broadcast({ type: 'eeg_data', data });\n    \n    // Store EEG data for active sessions\n    try {\n      const activeSessions = await storage.getActiveSessions();\n      for (const session of activeSessions) {\n        await storage.addEegData({\n          sessionId: session.id,\n          attention: data.attention,\n          meditation: data.meditation,\n          signalQuality: data.signalQuality,\n          rawData: data\n        });\n      }\n    } catch (error) {\n      console.error('Error storing EEG data:', error);\n    }\n  });\n  \n  neuroskyService.on('error', (error) => {\n    broadcast({ type: 'neurosky_error', error: error.message });\n  });\n  \n  // API Routes\n  \n  // Create a new session\n  app.post(\"/api/sessions\", async (req, res) => {\n    try {\n      const validatedData = insertSessionSchema.parse(req.body);\n      const session = await storage.createSession(validatedData);\n      res.json(session);\n    } catch (error) {\n      res.status(400).json({ \n        error: error instanceof Error ? error.message : 'Invalid session data' \n      });\n    }\n  });\n  \n  // Get session by ID\n  app.get(\"/api/sessions/:id\", async (req, res) => {\n    try {\n      const session = await storage.getSession(req.params.id);\n      if (!session) {\n        return res.status(404).json({ error: 'Session not found' });\n      }\n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : 'Failed to get session' \n      });\n    }\n  });\n  \n  // Update session\n  app.patch(\"/api/sessions/:id\", async (req, res) => {\n    try {\n      const updates = insertSessionSchema.partial().parse(req.body);\n      const session = await storage.updateSession(req.params.id, updates);\n      if (!session) {\n        return res.status(404).json({ error: 'Session not found' });\n      }\n      res.json(session);\n    } catch (error) {\n      res.status(400).json({ \n        error: error instanceof Error ? error.message : 'Invalid update data' \n      });\n    }\n  });\n  \n  // Get recent mandalas\n  app.get(\"/api/mandalas/recent\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 6;\n      const mandalas = await storage.getRecentMandalas(limit);\n      res.json(mandalas);\n    } catch (error) {\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : 'Failed to get mandalas' \n      });\n    }\n  });\n  \n  // Get mandala by ID\n  app.get(\"/api/mandalas/:id\", async (req, res) => {\n    try {\n      const mandala = await storage.getMandala(req.params.id);\n      if (!mandala) {\n        return res.status(404).json({ error: 'Mandala not found' });\n      }\n      res.json(mandala);\n    } catch (error) {\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : 'Failed to get mandala' \n      });\n    }\n  });\n\n  // Serve mandala image directly\n  app.get(\"/api/mandalas/:id/image\", async (req, res) => {\n    try {\n      const mandala = await storage.getMandala(req.params.id);\n      if (!mandala) {\n        return res.status(404).json({ error: 'Mandala not found' });\n      }\n\n      // Handle data URLs (locally generated SVG mandalas)\n      if (mandala.imageUrl.startsWith('data:')) {\n        const [header, base64Data] = mandala.imageUrl.split(',');\n        const mimeMatch = header.match(/data:([^;]+)/);\n        const mimeType = mimeMatch ? mimeMatch[1] : 'image/svg+xml';\n        \n        const buffer = Buffer.from(base64Data, 'base64');\n        \n        res.set({\n          'Content-Type': mimeType,\n          'Content-Length': buffer.length,\n          'Cache-Control': 'public, max-age=31536000', // Cache for 1 year\n          'ETag': `\"${req.params.id}\"`\n        });\n        \n        res.send(buffer);\n      } else {\n        // Handle external URLs (OpenAI generated images) - redirect\n        res.redirect(302, mandala.imageUrl);\n      }\n    } catch (error) {\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : 'Failed to serve mandala image' \n      });\n    }\n  });\n  \n  // Generate mandala\n  app.post(\"/api/mandalas/generate\", async (req, res) => {\n    try {\n      const generateSchema = z.object({\n        voiceTranscript: z.string().min(1, \"Voice transcript is required\"),\n        brainwaveData: z.object({\n          attention: z.number().min(0).max(100),\n          meditation: z.number().min(0).max(100),\n          signalQuality: z.number().min(0).max(100),\n          timestamp: z.number()\n        }),\n        sessionId: z.string(),\n        style: z.enum(['traditional', 'modern', 'abstract', 'spiritual']).optional(),\n        colorPalette: z.enum(['warm', 'cool', 'vibrant', 'monochrome']).optional()\n      });\n      \n      const data = generateSchema.parse(req.body);\n      \n      // Verify session exists\n      const session = await storage.getSession(data.sessionId);\n      if (!session) {\n        return res.status(404).json({ error: 'Session not found' });\n      }\n      \n      // Generate AI prompt using Gemini\n      const prompt = await geminiService.generateMandalaPrompt({\n        voiceTranscript: data.voiceTranscript,\n        brainwaveData: data.brainwaveData,\n        style: data.style,\n        colorPalette: data.colorPalette\n      });\n      \n      // Generate mandala image using Gemini\n      const generatedMandala = await geminiService.generateMandalaImage(prompt, data.brainwaveData);\n      \n      // Store mandala\n      const mandala = await storage.createMandala({\n        sessionId: data.sessionId,\n        imageUrl: generatedMandala.imageUrl,\n        prompt: generatedMandala.prompt,\n        brainwaveData: data.brainwaveData,\n        voiceTranscript: data.voiceTranscript\n      });\n      \n      // Update session with latest data\n      await storage.updateSession(data.sessionId, {\n        voiceTranscript: data.voiceTranscript,\n        aiPrompt: prompt,\n        mandalaUrl: generatedMandala.imageUrl,\n        attentionLevel: data.brainwaveData.attention,\n        meditationLevel: data.brainwaveData.meditation,\n        signalQuality: data.brainwaveData.signalQuality\n      });\n      \n      // Broadcast to connected clients\n      broadcast({\n        type: 'mandala_generated',\n        mandala,\n        generatedMandala\n      });\n      \n      res.json({\n        mandala,\n        generatedPrompt: prompt,\n        imageUrl: generatedMandala.imageUrl,\n        revisedPrompt: generatedMandala.revisedPrompt\n      });\n      \n    } catch (error: any) {\n      console.error('Error generating mandala:', error);\n      \n      // Provide more specific error messages\n      let errorMessage = 'Failed to generate mandala';\n      let errorCode = 500;\n      \n      if (error?.code === 'insufficient_quota' || error?.code === 'billing_hard_limit_reached') {\n        errorMessage = 'API quota exceeded. Using fallback mandala generation...';\n        errorCode = 503; // Service temporarily unavailable\n      } else if (error?.status === 429) {\n        errorMessage = 'Too many requests. Please try again in a few minutes.';\n        errorCode = 429;\n      } else if (error?.message?.includes('network') || error?.message?.includes('timeout')) {\n        errorMessage = 'Connection problem. Please try again.';\n        errorCode = 502; // Bad gateway\n      }\n      \n      res.status(errorCode).json({ \n        error: errorMessage,\n        details: error instanceof Error ? error.message : 'Unknown error',\n        fallbackAvailable: true\n      });\n    }\n  });\n  \n  // Get EEG data for session\n  app.get(\"/api/sessions/:id/eeg\", async (req, res) => {\n    try {\n      const eegData = await storage.getEegDataForSession(req.params.id);\n      res.json(eegData);\n    } catch (error) {\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : 'Failed to get EEG data' \n      });\n    }\n  });\n  \n  // Get current NeuroSky status with detailed information\n  app.get(\"/api/neurosky/status\", (req, res) => {\n    res.json({\n      connected: neuroskyService.getConnectionStatus(),\n      currentData: neuroskyService.getCurrentData(),\n      connectionInfo: neuroskyService.getConnectionInfo()\n    });\n  });\n  \n  // Connect to NeuroSky with better error handling\n  app.post(\"/api/neurosky/connect\", async (req, res) => {\n    try {\n      // Reset reconnection attempts before trying\n      neuroskyService.resetReconnectionAttempts();\n      \n      // Check if ThinkGear Connector is available first\n      const isAvailable = await NeuroSkyService.checkThinkGearConnector();\n      if (!isAvailable) {\n        return res.status(503).json({ \n          success: false,\n          error: 'ThinkGear Connector is not running',\n          message: 'Please start ThinkGear Connector and connect your NeuroSky device first',\n          needsSetup: true\n        });\n      }\n      \n      await neuroskyService.connect();\n      \n      // Broadcast connection success to WebSocket clients\n      broadcast({ \n        type: 'neurosky_connected',\n        connectionInfo: neuroskyService.getConnectionInfo()\n      });\n      \n      res.json({ \n        success: true, \n        message: 'Successfully connected to NeuroSky device via ThinkGear Connector',\n        connectionInfo: neuroskyService.getConnectionInfo()\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to connect to NeuroSky';\n      const needsSetup = errorMessage.includes('ThinkGear Connector');\n      \n      // Broadcast connection error to WebSocket clients\n      broadcast({ \n        type: 'neurosky_error',\n        error: errorMessage\n      });\n      \n      res.status(500).json({ \n        success: false,\n        error: errorMessage,\n        needsSetup,\n        troubleshooting: needsSetup ? [\n          'Ensure ThinkGear Connector is running',\n          'Check that your NeuroSky device is connected in ThinkGear Connector',\n          'Try restarting ThinkGear Connector',\n          'Make sure the COM port is properly selected'\n        ] : [\n          'Check your NeuroSky device battery',\n          'Ensure proper headset placement',\n          'Try disconnecting and reconnecting in ThinkGear Connector'\n        ]\n      });\n    }\n  });\n  \n  // Disconnect from NeuroSky with cleanup\n  app.post(\"/api/neurosky/disconnect\", (req, res) => {\n    try {\n      neuroskyService.disconnect();\n      \n      // Broadcast disconnection to WebSocket clients\n      broadcast({ \n        type: 'neurosky_disconnected',\n        connectionInfo: neuroskyService.getConnectionInfo()\n      });\n      \n      res.json({ \n        success: true, \n        message: 'Successfully disconnected from NeuroSky device',\n        connectionInfo: neuroskyService.getConnectionInfo()\n      });\n    } catch (error) {\n      res.status(500).json({ \n        success: false,\n        error: error instanceof Error ? error.message : 'Error during disconnection'\n      });\n    }\n  });\n  \n  // Check if ThinkGear Connector is available with detailed status\n  app.get(\"/api/neurosky/check\", async (req, res) => {\n    try {\n      const available = await NeuroSkyService.checkThinkGearConnector();\n      res.json({ \n        available,\n        status: available ? 'ready' : 'not_running',\n        message: available \n          ? 'ThinkGear Connector is running and ready for connection'\n          : 'ThinkGear Connector is not running. Please start the application and connect your NeuroSky device.',\n        instructions: {\n          windows: [\n            'Download and install ThinkGear Connector from NeuroSky developer portal',\n            'Power on your NeuroSky headset and wait for the blue light',\n            'Open ThinkGear Connector application',\n            'Select the correct COM port (usually COM3, COM4, COM5, or COM6)',\n            'Click Connect - you should see \"Connecting...\" then \"Connected\"',\n            'Return to this application and try connecting again'\n          ],\n          mac: [\n            'Download and install ThinkGear Connector for macOS',\n            'Power on your NeuroSky headset and pair via Bluetooth',\n            'Open ThinkGear Connector application',\n            'Select your paired headset from the device list',\n            'Click Connect and wait for successful connection',\n            'Return to this application and try connecting again'\n          ],\n          troubleshooting: [\n            'Ensure your NeuroSky headset is charged and powered on',\n            'Check that the headset is properly paired with your computer',\n            'Restart ThinkGear Connector if connection fails',\n            'Try different COM ports if using Windows',\n            'Make sure no other applications are using the NeuroSky device'\n          ]\n        }\n      });\n    } catch (error) {\n      res.json({ \n        available: false, \n        status: 'error',\n        message: 'Error checking ThinkGear Connector availability',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // Enable demo mode with better feedback\n  app.post(\"/api/neurosky/demo/enable\", (req, res) => {\n    try {\n      // Disconnect any real connection first\n      if (neuroskyService.getConnectionStatus()) {\n        neuroskyService.disconnect();\n      }\n      \n      neuroskyService.enableDemoMode();\n      \n      // Broadcast demo mode enabled to WebSocket clients\n      broadcast({ \n        type: 'demo_enabled',\n        message: 'Demo mode enabled - generating simulated brainwave data',\n        connectionInfo: neuroskyService.getConnectionInfo()\n      });\n      \n      res.json({ \n        success: true, \n        message: 'Demo mode enabled - generating simulated brainwave data',\n        demoInfo: {\n          description: 'Demo mode simulates realistic brainwave patterns with 4 phases:',\n          phases: [\n            'Settling in - Lower attention and meditation as you get comfortable',\n            'Building focus - Increasing attention with moderate meditation',\n            'Deep meditation - High meditation with relaxed attention',\n            'Mixed state - Balanced attention and meditation levels'\n          ],\n          note: 'Each phase lasts 30 seconds and cycles continuously'\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ \n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to enable demo mode' \n      });\n    }\n  });\n\n  // Disable demo mode with status update\n  app.post(\"/api/neurosky/demo/disable\", (req, res) => {\n    try {\n      neuroskyService.disableDemoMode();\n      \n      // Broadcast demo mode disabled to WebSocket clients\n      broadcast({ \n        type: 'demo_disabled',\n        message: 'Demo mode disabled - ready for real NeuroSky connection',\n        connectionInfo: neuroskyService.getConnectionInfo()\n      });\n      \n      res.json({ \n        success: true, \n        message: 'Demo mode disabled - ready for real NeuroSky connection',\n        connectionInfo: neuroskyService.getConnectionInfo()\n      });\n    } catch (error) {\n      res.status(500).json({ \n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to disable demo mode' \n      });\n    }\n  });\n  \n  return httpServer;\n}\n","size_bytes":19102},"SCCP1910/fecart-15-09/MandalaMind/server/storage.ts":{"content":"import { type Session, type InsertSession, type Mandala, type InsertMandala, type EegData, type InsertEegData } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Session management\n  createSession(session: InsertSession): Promise<Session>;\n  getSession(id: string): Promise<Session | undefined>;\n  updateSession(id: string, updates: Partial<InsertSession>): Promise<Session | undefined>;\n  getActiveSessions(): Promise<Session[]>;\n\n  // Mandala management\n  createMandala(mandala: InsertMandala): Promise<Mandala>;\n  getMandala(id: string): Promise<Mandala | undefined>;\n  getMandalasForSession(sessionId: string): Promise<Mandala[]>;\n  getRecentMandalas(limit: number): Promise<Mandala[]>;\n\n  // EEG data management\n  addEegData(data: InsertEegData): Promise<EegData>;\n  getEegDataForSession(sessionId: string): Promise<EegData[]>;\n  getLatestEegData(sessionId: string): Promise<EegData | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private sessions: Map<string, Session>;\n  private mandalas: Map<string, Mandala>;\n  private eegData: Map<string, EegData>;\n\n  constructor() {\n    this.sessions = new Map();\n    this.mandalas = new Map();\n    this.eegData = new Map();\n  }\n\n  async createSession(insertSession: InsertSession): Promise<Session> {\n    const id = randomUUID();\n    const session: Session = {\n      ...insertSession,\n      id,\n      createdAt: new Date(),\n      isActive: true,\n      attentionLevel: insertSession.attentionLevel ?? null,\n      meditationLevel: insertSession.meditationLevel ?? null,\n      signalQuality: insertSession.signalQuality ?? null,\n      voiceTranscript: insertSession.voiceTranscript ?? null,\n      aiPrompt: insertSession.aiPrompt ?? null,\n      mandalaUrl: insertSession.mandalaUrl ?? null,\n    };\n    this.sessions.set(id, session);\n    return session;\n  }\n\n  async getSession(id: string): Promise<Session | undefined> {\n    return this.sessions.get(id);\n  }\n\n  async updateSession(id: string, updates: Partial<InsertSession>): Promise<Session | undefined> {\n    const session = this.sessions.get(id);\n    if (!session) return undefined;\n\n    const updatedSession = { ...session, ...updates };\n    this.sessions.set(id, updatedSession);\n    return updatedSession;\n  }\n\n  async getActiveSessions(): Promise<Session[]> {\n    return Array.from(this.sessions.values()).filter(session => session.isActive);\n  }\n\n  async createMandala(insertMandala: InsertMandala): Promise<Mandala> {\n    const id = randomUUID();\n    const mandala: Mandala = {\n      ...insertMandala,\n      id,\n      createdAt: new Date(),\n      sessionId: insertMandala.sessionId ?? null,\n      voiceTranscript: insertMandala.voiceTranscript ?? null,\n    };\n    this.mandalas.set(id, mandala);\n    return mandala;\n  }\n\n  async getMandala(id: string): Promise<Mandala | undefined> {\n    return this.mandalas.get(id);\n  }\n\n  async getMandalasForSession(sessionId: string): Promise<Mandala[]> {\n    return Array.from(this.mandalas.values()).filter(mandala => mandala.sessionId === sessionId);\n  }\n\n  async getRecentMandalas(limit: number): Promise<Mandala[]> {\n    return Array.from(this.mandalas.values())\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n      .slice(0, limit);\n  }\n\n  async addEegData(insertData: InsertEegData): Promise<EegData> {\n    const id = randomUUID();\n    const data: EegData = {\n      ...insertData,\n      id,\n      timestamp: new Date(),\n      sessionId: insertData.sessionId ?? null,\n      rawData: insertData.rawData ?? null,\n    };\n    this.eegData.set(id, data);\n    return data;\n  }\n\n  async getEegDataForSession(sessionId: string): Promise<EegData[]> {\n    return Array.from(this.eegData.values())\n      .filter(data => data.sessionId === sessionId)\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n\n  async getLatestEegData(sessionId: string): Promise<EegData | undefined> {\n    const sessionData = await this.getEegDataForSession(sessionId);\n    return sessionData[sessionData.length - 1];\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":4086},"SCCP1910/fecart-15-09/MandalaMind/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"SCCP1910/fecart-15-09/MandalaMind/shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  attentionLevel: integer(\"attention_level\").default(0),\n  meditationLevel: integer(\"meditation_level\").default(0),\n  signalQuality: integer(\"signal_quality\").default(0),\n  voiceTranscript: text(\"voice_transcript\"),\n  aiPrompt: text(\"ai_prompt\"),\n  mandalaUrl: text(\"mandala_url\"),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const mandalas = pgTable(\"mandalas\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").references(() => sessions.id),\n  imageUrl: text(\"image_url\").notNull(),\n  prompt: text(\"prompt\").notNull(),\n  brainwaveData: jsonb(\"brainwave_data\").notNull(),\n  voiceTranscript: text(\"voice_transcript\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const eegData = pgTable(\"eeg_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").references(() => sessions.id),\n  attention: integer(\"attention\").notNull(),\n  meditation: integer(\"meditation\").notNull(),\n  signalQuality: integer(\"signal_quality\").notNull(),\n  rawData: jsonb(\"raw_data\"),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMandalaSchema = createInsertSchema(mandalas).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEegDataSchema = createInsertSchema(eegData).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type Session = typeof sessions.$inferSelect;\n\nexport type InsertMandala = z.infer<typeof insertMandalaSchema>;\nexport type Mandala = typeof mandalas.$inferSelect;\n\nexport type InsertEegData = z.infer<typeof insertEegDataSchema>;\nexport type EegData = typeof eegData.$inferSelect;\n\nexport interface BrainwaveData {\n  attention: number;\n  meditation: number;\n  signalQuality: number;\n  timestamp: number;\n}\n\nexport interface GenerateMandalaRequest {\n  voiceTranscript: string;\n  brainwaveData: BrainwaveData;\n  sessionId: string;\n}\n","size_bytes":2475},"SCCP1910/fecart-15-09/MandalaMind/client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"SCCP1910/fecart-15-09/MandalaMind/client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(263.4, 70%, 50.4%);\n  --primary-foreground: hsl(210, 20%, 98%);\n  --secondary: hsl(215, 27.9%, 16.9%);\n  --secondary-foreground: hsl(210, 20%, 98%);\n  --muted: hsl(215, 27.9%, 16.9%);\n  --muted-foreground: hsl(217.9, 10.6%, 64.9%);\n  --accent: hsl(215, 27.9%, 16.9%);\n  --accent-foreground: hsl(210, 20%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 20%, 98%);\n  --border: hsl(215, 27.9%, 16.9%);\n  --input: hsl(215, 27.9%, 16.9%);\n  --ring: hsl(263.4, 70%, 50.4%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(240, 10%, 3.9%);\n  --sidebar-foreground: hsl(0, 0%, 98%);\n  --sidebar-primary: hsl(263.4, 70%, 50.4%);\n  --sidebar-primary-foreground: hsl(210, 20%, 98%);\n  --sidebar-accent: hsl(215, 27.9%, 16.9%);\n  --sidebar-accent-foreground: hsl(210, 20%, 98%);\n  --sidebar-border: hsl(215, 27.9%, 16.9%);\n  --sidebar-ring: hsl(263.4, 70%, 50.4%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(263.4, 70%, 50.4%);\n  --primary-foreground: hsl(210, 20%, 98%);\n  --secondary: hsl(215, 27.9%, 16.9%);\n  --secondary-foreground: hsl(210, 20%, 98%);\n  --muted: hsl(215, 27.9%, 16.9%);\n  --muted-foreground: hsl(217.9, 10.6%, 64.9%);\n  --accent: hsl(215, 27.9%, 16.9%);\n  --accent-foreground: hsl(210, 20%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 20%, 98%);\n  --border: hsl(215, 27.9%, 16.9%);\n  --input: hsl(215, 27.9%, 16.9%);\n  --ring: hsl(263.4, 70%, 50.4%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n/* Glass effect */\n.glass {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n/* Brain wave animations */\n.brain-wave {\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.7; }\n}\n\n/* Floating animation */\n.floating {\n  animation: float 3s ease-in-out infinite;\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n/* Recording pulse animation */\n.recording-pulse {\n  animation: record-pulse 1.5s infinite;\n}\n\n@keyframes record-pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.1); }\n  100% { transform: scale(1); }\n}\n\n/* Mandala container background */\n.mandala-container {\n  background: radial-gradient(circle, rgba(168, 85, 247, 0.1) 0%, rgba(20, 184, 166, 0.1) 100%);\n}\n\n/* Particle animation background */\n.particles {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  pointer-events: none;\n}\n\n.particle {\n  position: absolute;\n  width: 2px;\n  height: 2px;\n  background: rgba(168, 85, 247, 0.6);\n  border-radius: 50%;\n}\n\n@keyframes particle-float {\n  0% {\n    transform: translateY(100vh) translateX(0);\n    opacity: 0;\n  }\n  10% {\n    opacity: 1;\n  }\n  90% {\n    opacity: 1;\n  }\n  100% {\n    transform: translateY(-100px) translateX(100px);\n    opacity: 0;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--muted);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--border);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: var(--accent);\n}\n\n/* Line clamp utility */\n.line-clamp-4 {\n  display: -webkit-box;\n  -webkit-line-clamp: 4;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n","size_bytes":4318},"SCCP1910/fecart-15-09/MandalaMind/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"SCCP1910/fecart-15-09/MandalaMind/server/services/gemini.ts":{"content":"import { GoogleGenAI, Modality } from \"@google/genai\";\nimport { BrainwaveData } from \"@shared/schema\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\n// DON'T DELETE THIS COMMENT\n// Using blueprint:javascript_gemini integration\n// Note that the newest Gemini model series is \"gemini-2.5-flash\" or \"gemini-2.5-pro\"\n\nconst ai = new GoogleGenAI({ \n  apiKey: process.env.GEMINI_API_KEY || \"\" \n});\n\n// Startup check for Gemini API key\nif (!process.env.GEMINI_API_KEY) {\n  console.warn('⚠️  GEMINI_API_KEY not found. Cloud image generation will use SVG fallback.');\n}\n\nexport interface MandalaGenerationOptions {\n  voiceTranscript: string;\n  brainwaveData: BrainwaveData;\n  style?: 'traditional' | 'modern' | 'abstract' | 'spiritual';\n  colorPalette?: 'warm' | 'cool' | 'vibrant' | 'monochrome';\n}\n\nexport interface GeneratedMandala {\n  imageUrl: string;\n  prompt: string;\n  revisedPrompt?: string;\n}\n\nexport class GeminiService {\n  \n  // Health check method to verify Gemini is working\n  async healthCheck(): Promise<boolean> {\n    try {\n      const response = await ai.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        contents: \"Hello, respond with just 'OK'\",\n      });\n      return !!response.text;\n    } catch (error) {\n      console.warn('Gemini health check failed:', error);\n      return false;\n    }\n  }\n  \n  async generateMandalaPrompt(options: MandalaGenerationOptions): Promise<string> {\n    const { voiceTranscript, brainwaveData, style = 'spiritual', colorPalette = 'vibrant' } = options;\n    \n    // Try Gemini with retry logic\n    for (let attempt = 1; attempt <= 3; attempt++) {\n      try {\n        const systemPrompt = `You are an AI that creates detailed mandala generation prompts by analyzing brain wave data and voice transcripts. \n\nCreate mandala prompts that reflect the beautiful traditional dot painting style with:\n- Intricate concentric circles made of small dots in various sizes\n- Deep blue background with radiating dotted patterns  \n- Lotus-like flower patterns with detailed petal work\n- Sacred geometric patterns using dot work technique\n- White and light blue dots creating luminous effects against dark blue\n- Multiple layers of circular patterns from center outward\n- Traditional spiritual symbolism expressed through dot art\n\nYour task is to create a beautiful, spiritually meaningful mandala prompt that reflects:\n1. The person's mental state based on their brain waves\n2. The emotional content and themes from their voice transcript\n3. Traditional dot painting mandala style with intricate geometric patterns\n\nAlways respond in English regardless of the input language, as the image generation requires English prompts.`;\n\n        const userPrompt = `Please create a mandala generation prompt based on this data:\n\nVoice Transcript: \"${voiceTranscript}\"\n\nBrain Wave Data:\n- Attention Level: ${brainwaveData.attention}% (0-100, higher = more focused)\n- Meditation Level: ${brainwaveData.meditation}% (0-100, higher = more relaxed/meditative)\n- Signal Quality: ${brainwaveData.signalQuality}% (connection quality)\n\nStyle Preference: ${style}\nColor Palette: ${colorPalette}\n\nGuidelines:\n- High attention (>70%) = sharp, precise dot patterns, focused geometric energy\n- High meditation (>70%) = flowing, soft dot gradients, peaceful circular patterns\n- Balanced levels = harmonious, symmetrical dot work designs\n- Low signal quality should be noted but not prevent generation\n\nExtract emotional themes, spiritual concepts, and energy patterns from the voice transcript.\nIncorporate traditional dot painting mandala elements:\n- Concentric circles of dots in various sizes\n- Sacred lotus patterns with dotted petals  \n- Deep blue base with luminous white/light blue dots\n- Radiating geometric patterns from center outward\n- Multiple layers of intricate dot work\n- Traditional spiritual symbolism expressed through dot art technique\n\nAlways create prompts in English for image generation compatibility, regardless of input language.\n\nRespond with JSON: { \"prompt\": \"detailed traditional dot painting mandala generation prompt in English\" }`;\n\n        const response = await ai.models.generateContent({\n          model: \"gemini-2.5-pro\",\n          config: {\n            systemInstruction: systemPrompt,\n            responseMimeType: \"application/json\",\n            responseSchema: {\n              type: \"object\",\n              properties: {\n                prompt: { type: \"string\" },\n              },\n              required: [\"prompt\"],\n            },\n          },\n          contents: userPrompt,\n        });\n\n        const result = JSON.parse(response.text || '{}');\n        return result.prompt || this.getFallbackPrompt(options);\n        \n      } catch (error: any) {\n        console.error(`Error generating mandala prompt with Gemini (attempt ${attempt}):`, error);\n        \n        // For rate limiting, wait before retrying\n        if (attempt < 3) {\n          await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));\n          continue;\n        }\n      }\n    }\n    \n    // Fallback to local prompt generation\n    console.log('Using fallback prompt generation due to Gemini API issues');\n    return this.getFallbackPrompt(options);\n  }\n\n  async generateMandalaImage(prompt: string, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): Promise<GeneratedMandala> {\n    // Enhanced prompt generation based on brainwave data\n    let styleModifiers = '';\n    let complexityLevel = '';\n    let colorIntensity = '';\n    \n    if (brainwaveData) {\n      // Attention influences complexity and precision\n      if (brainwaveData.attention > 70) {\n        complexityLevel = 'highly intricate and precisely detailed with sharp geometric precision';\n        styleModifiers += 'focused energy patterns with crystalline clarity, ';\n      } else if (brainwaveData.attention < 30) {\n        complexityLevel = 'flowing and organic with soft, dreamy details';\n        styleModifiers += 'gentle, flowing energy with soft focus, ';\n      } else {\n        complexityLevel = 'balanced complexity with harmonious details';\n        styleModifiers += 'centered and stable energy patterns, ';\n      }\n      \n      // Meditation influences color warmth and flow\n      if (brainwaveData.meditation > 70) {\n        colorIntensity = 'deep, calming colors with gentle gradients and peaceful luminescence';\n        styleModifiers += 'serene and tranquil atmosphere with smooth color transitions, ';\n      } else if (brainwaveData.meditation < 30) {\n        colorIntensity = 'vibrant, dynamic colors with energetic contrasts and bright highlights';\n        styleModifiers += 'active and energetic atmosphere with bold color contrasts, ';\n      } else {\n        colorIntensity = 'balanced color palette with moderate intensity and natural harmony';\n        styleModifiers += 'harmonious and balanced energy, ';\n      }\n      \n      // Signal quality influences overall clarity\n      if (brainwaveData.signalQuality < 50) {\n        styleModifiers += 'with subtle ethereal effects and mystical atmosphere, ';\n      }\n    } else {\n      complexityLevel = 'intricate and detailed';\n      colorIntensity = 'vibrant and luminous colors';\n      styleModifiers = 'balanced energy and harmonious design, ';\n    }\n    \n    const enhancedPrompt = `Create an exquisite traditional dot painting mandala masterpiece: ${prompt}. \n    \n    MANDALA STRUCTURE:\n    - Perfectly circular and symmetrical design with ${complexityLevel}\n    - Multiple concentric rings of dots in varying sizes (from tiny pinpoints to larger accent dots)\n    - Sacred geometric patterns including lotus petals, triangular formations, and spiral motifs\n    - Traditional Aboriginal-inspired dot work technique with modern spiritual symbolism\n    \n    COLOR PALETTE & ATMOSPHERE:\n    - ${colorIntensity}\n    - Deep celestial blue background (#1a237e to #000051 gradient)\n    - Luminous white and light blue dots (#ffffff, #e3f2fd, #bbdefb) creating stellar effects\n    - Accent colors: gold (#ffd700), turquoise (#40e0d0), and lavender (#e6e6fa)\n    - ${styleModifiers}\n    \n    ARTISTIC DETAILS:\n    - Center: Sacred symbol or flower motif with radiating energy\n    - Inner rings: Detailed lotus petals with intricate dot patterns\n    - Middle rings: Geometric patterns, mandalic squares, and triangular formations\n    - Outer rings: Protective circles with guardian symbols and flowing energy\n    - Edge: Subtle starburst effects and cosmic energy radiations\n    \n    TECHNIQUE:\n    - Traditional pointillism technique with varying dot densities\n    - Dots should create optical mixing and luminous effects\n    - Perfect symmetry across all axes\n    - Professional spiritual artwork quality\n    - Fills entire circular canvas with balanced composition\n    \n    The final result should be a breathtakingly beautiful, spiritually uplifting mandala that reflects the user's mental and emotional state through color, pattern, and energy flow. High resolution, museum-quality artistic rendering.`;\n\n    // Try Gemini image generation with retry logic\n    for (let attempt = 1; attempt <= 2; attempt++) {\n      try {\n        // Create a unique filename for the generated image\n        const timestamp = Date.now();\n        const filename = `mandala_${timestamp}.png`;\n        const imagePath = path.resolve(process.cwd(), 'attached_assets', filename);\n        \n        // Ensure the directory exists\n        const dir = path.dirname(imagePath);\n        if (!fs.existsSync(dir)) {\n          fs.mkdirSync(dir, { recursive: true });\n        }\n\n        // IMPORTANT: only gemini-2.0-flash-preview-image-generation model supports image generation\n        const response = await ai.models.generateContent({\n          model: \"gemini-2.0-flash-preview-image-generation\",\n          contents: [{ role: \"user\", parts: [{ text: enhancedPrompt }] }],\n          config: {\n            responseModalities: [Modality.TEXT, Modality.IMAGE],\n          },\n        });\n\n        const candidates = response.candidates;\n        if (!candidates || candidates.length === 0) {\n          throw new Error('No image generated from Gemini');\n        }\n\n        const content = candidates[0].content;\n        if (!content || !content.parts) {\n          throw new Error('No content parts in Gemini response');\n        }\n\n        let imageGenerated = false;\n        let revisedPrompt = '';\n\n        for (const part of content.parts) {\n          if (part.text) {\n            revisedPrompt = part.text;\n            console.log('Gemini response text:', part.text);\n          } else if (part.inlineData && part.inlineData.data) {\n            const imageData = Buffer.from(part.inlineData.data, \"base64\");\n            fs.writeFileSync(imagePath, imageData);\n            console.log(`Gemini image saved as ${imagePath}`);\n            imageGenerated = true;\n          }\n        }\n\n        if (imageGenerated) {\n          // Return the relative path that can be served by the Express static middleware\n          const relativeImagePath = `/attached_assets/${filename}`;\n          return {\n            imageUrl: relativeImagePath,\n            prompt: enhancedPrompt,\n            revisedPrompt: revisedPrompt || `Gemini generated mandala: ${enhancedPrompt}`\n          };\n        } else {\n          throw new Error('No image data received from Gemini');\n        }\n\n      } catch (error: any) {\n        console.error(`Error generating mandala image with Gemini (attempt ${attempt}):`, error);\n        \n        // For other errors, wait before retrying\n        if (attempt < 2) {\n          await new Promise(resolve => setTimeout(resolve, 2000));\n          continue;\n        }\n      }\n    }\n    \n    // Fallback to generated placeholder mandala\n    console.log('Using fallback mandala generation due to Gemini issues');\n    return this.generateFallbackMandala(prompt, brainwaveData);\n  }\n\n  private getFallbackPrompt(options: MandalaGenerationOptions): string {\n    const { voiceTranscript, brainwaveData, style, colorPalette } = options;\n    \n    // Analyze voice transcript for emotional and spiritual themes\n    const themes = this.extractThemesFromVoice(voiceTranscript);\n    \n    // Create sophisticated base prompt\n    let prompt = \"Create an exquisite traditional dot painting mandala masterpiece with concentric circles of luminous dots in varying sizes. \";\n    \n    // Attention-based structural elements (more detailed)\n    if (brainwaveData.attention > 70) {\n      prompt += \"Ultra-precise geometric dot patterns with crystalline clarity, sharp angular formations, and highly detailed symmetrical structures. Each dot perfectly placed for maximum focus and concentration energy. \";\n    } else if (brainwaveData.attention < 30) {\n      prompt += \"Soft, organic dot patterns with flowing transitions, gentle curves, and dreamy ethereal formations. Dots create flowing energy like water or clouds. \";\n    } else {\n      prompt += \"Balanced dot patterns with harmonious geometric structures, moderate complexity, and stable radial symmetry. Perfect equilibrium between order and flow. \";\n    }\n    \n    // Meditation-based flow elements (enhanced)\n    if (brainwaveData.meditation > 70) {\n      prompt += \"Deep, peaceful dot gradients creating waves of tranquility, with gentle spirals and calming circular patterns that radiate serene energy from the center outward. \";\n    } else if (brainwaveData.meditation < 30) {\n      prompt += \"Dynamic, energetic dot work with vibrant spiral patterns, active radiating lines, and pulsing geometric forms that express vitality and movement. \";\n    } else {\n      prompt += \"Centered, grounded dot patterns with stable circular formations and balanced energy distribution throughout the design. \";\n    }\n    \n    // Enhanced color palettes based on selection\n    const colorPalettes = {\n      warm: \"warm sunset palette: deep oranges (#ff8c00), rich reds (#dc143c), golden yellows (#ffd700), and bronze dots (#cd7f32) against a deep amber background (#ff8c00 to #8b4513 gradient)\",\n      cool: \"cool celestial palette: deep midnight blues (#191970), purples (#663399), teals (#008b8b), and silver-white dots (#f5f5dc) against a cosmic blue background (#000080 to #191970 gradient)\",\n      vibrant: \"vibrant cosmic palette: electric blues (#0066ff), luminous whites (#ffffff), light blues (#87ceeb), turquoise accents (#40e0d0), and gold highlights (#ffd700) against a deep space blue background (#000051 to #1a237e gradient)\",\n      monochrome: \"sophisticated monochrome palette: pure whites (#ffffff), light grays (#d3d3d3), medium grays (#808080), and charcoal (#36454f) against a deep black background (#000000 to #1c1c1c gradient)\"\n    };\n    \n    prompt += `Color scheme: ${colorPalettes[colorPalette || 'vibrant']}. `;\n    \n    // Voice transcript emotional integration (more sophisticated)\n    if (voiceTranscript && voiceTranscript.length > 5) {\n      const lowerTranscript = voiceTranscript.toLowerCase();\n      \n      if (themes.peace || lowerTranscript.includes('peace') || lowerTranscript.includes('calm')) {\n        prompt += \"Incorporate symbols of inner peace: dove motifs, olive branches, and gentle wave patterns flowing through the dot work. \";\n      }\n      if (themes.love || lowerTranscript.includes('love') || lowerTranscript.includes('heart')) {\n        prompt += \"Include heart-centered symbolism: lotus flowers blooming from the center, infinity symbols, and radiating rays of compassion. \";\n      }\n      if (themes.strength || lowerTranscript.includes('strength') || lowerTranscript.includes('power')) {\n        prompt += \"Add symbols of inner strength: mountain-like triangular patterns, shield formations, and bold radiating lines of empowerment. \";\n      }\n      if (themes.growth || lowerTranscript.includes('growth') || lowerTranscript.includes('change')) {\n        prompt += \"Express transformation: spiral patterns, tree-like branching formations, and evolving geometric patterns that grow in complexity. \";\n      }\n      if (themes.gratitude || lowerTranscript.includes('grateful') || lowerTranscript.includes('thank')) {\n        prompt += \"Embody gratitude: sun-like radiating patterns, flowering motifs, and warm embracing circles that express appreciation. \";\n      }\n    }\n    \n    // Style-based enhancements\n    const styleEnhancements = {\n      traditional: \"with classical mandala elements, traditional Buddhist and Hindu symbolism, and time-honored sacred geometry\",\n      modern: \"with contemporary geometric interpretations, sleek minimalist elements, and innovative pattern combinations\",\n      abstract: \"with experimental dot arrangements, unconventional symmetries, and artistic expression that breaks traditional boundaries\",\n      spiritual: \"with deep sacred symbolism, chakra representations, and mystical elements that connect to universal consciousness\"\n    };\n    \n    prompt += `Design aesthetic: ${styleEnhancements[style || 'spiritual']}. `;\n    \n    // Final quality and composition details\n    prompt += \"Multiple layers of intricate dot work radiating from a powerful center motif outward through concentric rings of increasing complexity. \";\n    prompt += \"Perfect circular composition with museum-quality artistic detail, spiritual depth, and breathtaking beauty that inspires meditation and inner reflection. \";\n    prompt += \"Each dot placed with intention to create optical harmony and luminous effects that seem to glow with inner light.\";\n    \n    return prompt;\n  }\n  \n  // Helper method to extract themes from voice transcript\n  private extractThemesFromVoice(voiceTranscript: string): {\n    peace: boolean;\n    love: boolean;\n    strength: boolean;\n    growth: boolean;\n    gratitude: boolean;\n  } {\n    if (!voiceTranscript) {\n      return { peace: false, love: false, strength: false, growth: false, gratitude: false };\n    }\n    \n    const lower = voiceTranscript.toLowerCase();\n    \n    return {\n      peace: /\\b(peace|calm|serene|tranquil|quiet|still|harmony|balance)\\b/.test(lower),\n      love: /\\b(love|heart|compassion|kindness|care|affection|warmth)\\b/.test(lower),\n      strength: /\\b(strength|strong|power|courage|confident|brave|determined)\\b/.test(lower),\n      growth: /\\b(grow|change|transform|evolve|progress|develop|journey|path)\\b/.test(lower),\n      gratitude: /\\b(grateful|thank|appreciation|blessed|fortunate|abundance)\\b/.test(lower)\n    };\n  }\n\n  private generateFallbackMandala(prompt: string, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): GeneratedMandala {\n    // Create a data URL for a unique SVG mandala as fallback\n    const svgMandala = this.createSVGMandala(prompt, brainwaveData);\n    const dataUrl = `data:image/svg+xml;base64,${Buffer.from(svgMandala).toString('base64')}`;\n    \n    return {\n      imageUrl: dataUrl,\n      prompt: prompt,\n      revisedPrompt: `Fallback mandala generated locally with unique variations: ${prompt}`\n    };\n  }\n\n  private createSVGMandala(prompt: string, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): string {\n    // Create a unique seed based on input to ensure variety\n    const seed = this.createSeedFromInput(prompt, brainwaveData);\n    const seededRandom = this.createSeededRandom(seed);\n    \n    // Generate colors based on prompt content with variation\n    const colors = this.extractColorsFromPrompt(prompt);\n    const mandalaStyle = this.determineMandalaStyle(prompt);\n    \n    // Add variation to the colors based on seed\n    const variantColors = this.addColorVariation(colors, seededRandom);\n    \n    return `\n      <svg width=\"512\" height=\"512\" viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\">\n        <defs>\n          ${this.generateGradients(variantColors, mandalaStyle, seededRandom, brainwaveData)}\n          ${this.generatePatterns(variantColors, seededRandom, brainwaveData)}\n          ${this.generateFilters(seededRandom, brainwaveData)}\n        </defs>\n        \n        <!-- Enhanced Background -->\n        <rect width=\"512\" height=\"512\" fill=\"url(#bgGradient)\"/>\n        \n        <!-- Multiple sophisticated mandala layers with more complexity -->\n        <g transform=\"translate(256,256)\">\n          ${this.generateOuterRing(variantColors, mandalaStyle, seededRandom, brainwaveData)}\n          ${this.generateMiddleRings(variantColors, mandalaStyle, seededRandom, brainwaveData)}\n          ${this.generateInnerPatterns(variantColors, mandalaStyle, seededRandom, brainwaveData)}\n          ${this.generateDetailedPetals(variantColors, mandalaStyle, seededRandom, brainwaveData)}\n          ${this.generateSacredGeometry(variantColors, mandalaStyle, seededRandom, brainwaveData)}\n          ${this.generateDotPatterns(variantColors, mandalaStyle, seededRandom, brainwaveData)}\n          ${this.generateCenterMotif(variantColors, mandalaStyle, seededRandom, brainwaveData)}\n          \n          <!-- Additional enhancement layers -->\n          <g opacity=\"0.7\">\n            ${this.generateOuterRing(variantColors, mandalaStyle, seededRandom, brainwaveData)}\n          </g>\n          <g opacity=\"0.5\" transform=\"rotate(45)\">\n            ${this.generateDetailedPetals(variantColors, mandalaStyle, seededRandom, brainwaveData)}\n          </g>\n        </g>\n        \n        <!-- Luminous overlay effects -->\n        <circle cx=\"256\" cy=\"256\" r=\"250\" fill=\"none\" stroke=\"${variantColors.dots}\" stroke-width=\"1\" opacity=\"0.3\"/>\n        <circle cx=\"256\" cy=\"256\" r=\"200\" fill=\"none\" stroke=\"${variantColors.accent}\" stroke-width=\"0.5\" opacity=\"0.5\"/>\n      </svg>\n    `;\n  }\n\n  // Helper methods (simplified versions of the OpenAI service methods)\n  private createSeedFromInput(prompt: string, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): number {\n    let hash = 0;\n    const str = prompt + (brainwaveData ? `${brainwaveData.attention}${brainwaveData.meditation}${brainwaveData.signalQuality}` : '');\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return Math.abs(hash);\n  }\n\n  private createSeededRandom(seed: number): () => number {\n    let currentSeed = seed;\n    return function() {\n      currentSeed = (currentSeed * 9301 + 49297) % 233280;\n      return currentSeed / 233280;\n    };\n  }\n\n  private determineMandalaStyle(prompt: string): 'dotpainting' | 'geometric' | 'floral' | 'sacred' {\n    const lowerPrompt = prompt.toLowerCase();\n    \n    if (lowerPrompt.includes('dot') || lowerPrompt.includes('aboriginal')) return 'dotpainting';\n    if (lowerPrompt.includes('geometric') || lowerPrompt.includes('sacred')) return 'sacred';\n    if (lowerPrompt.includes('flower') || lowerPrompt.includes('petal')) return 'floral';\n    \n    return 'geometric'; // default\n  }\n\n  private extractColorsFromPrompt(prompt: string): { \n    center: string, outer: string, dots: string, accent: string, \n    secondary: string, tertiary: string, gradient: string[] \n  } {\n    const lowerPrompt = prompt.toLowerCase();\n    \n    // Enhanced color palettes\n    let colors = {\n      center: '#ffffff',\n      outer: '#1a237e',\n      dots: '#e3f2fd',\n      accent: '#3949ab',\n      secondary: '#26c6da',\n      tertiary: '#42a5f5',\n      gradient: ['#e3f2fd', '#bbdefb', '#90caf9', '#64b5f6', '#42a5f5', '#2196f3', '#1976d2', '#1565c0']\n    };\n    \n    // Color variations based on prompt\n    if (lowerPrompt.includes('vibrant') || lowerPrompt.includes('bright')) {\n      colors = {\n        center: '#ffffff',\n        outer: '#9c27b0',\n        dots: '#e91e63',\n        accent: '#ff9800',\n        secondary: '#4caf50',\n        tertiary: '#2196f3',\n        gradient: ['#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#00bcd4', '#009688', '#4caf50', '#8bc34a', '#cddc39', '#ffeb3b', '#ffc107', '#ff9800']\n      };\n    }\n    \n    return colors;\n  }\n\n  private addColorVariation(colors: any, seededRandom: () => number): any {\n    // Create meaningful variations based on seeded random\n    const hueShift = (seededRandom() - 0.5) * 80; // ±40 degree hue shift\n    const saturationShift = (seededRandom() - 0.5) * 0.4; // ±20% saturation shift\n    const lightnessShift = (seededRandom() - 0.5) * 0.3; // ±15% lightness shift\n    \n    const variantColors = { ...colors };\n    \n    // Apply variations to all color properties\n    variantColors.center = this.adjustColorHSL(colors.center, hueShift * 0.2, saturationShift * 0.3, lightnessShift * 0.2);\n    variantColors.outer = this.adjustColorHSL(colors.outer, hueShift * 0.4, saturationShift * 0.4, lightnessShift * 0.3);\n    variantColors.dots = this.adjustColorHSL(colors.dots, hueShift * 0.3, saturationShift * 0.3, lightnessShift * 0.2);\n    variantColors.accent = this.adjustColorHSL(colors.accent, hueShift * 0.5, saturationShift * 0.5, lightnessShift * 0.25);\n    variantColors.secondary = this.adjustColorHSL(colors.secondary, hueShift * 0.3, saturationShift * 0.3, lightnessShift * 0.2);\n    variantColors.tertiary = this.adjustColorHSL(colors.tertiary, hueShift * 0.4, saturationShift * 0.4, lightnessShift * 0.25);\n    \n    // Vary gradient colors\n    if (colors.gradient && Array.isArray(colors.gradient)) {\n      variantColors.gradient = colors.gradient.map((color: string) => \n        this.adjustColorHSL(color, hueShift * 0.3, saturationShift * 0.3, lightnessShift * 0.2)\n      );\n    }\n    \n    return variantColors;\n  }\n\n  private adjustColorHSL(color: string, hueShift: number, satShift: number, lightShift: number): string {\n    // Convert hex to RGB\n    const hex = color.replace('#', '');\n    const r = parseInt(hex.substr(0, 2), 16) / 255;\n    const g = parseInt(hex.substr(2, 2), 16) / 255;\n    const b = parseInt(hex.substr(4, 2), 16) / 255;\n    \n    // Convert RGB to HSL\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0, s = 0, l = (max + min) / 2;\n    \n    if (max !== min) {\n      const d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      switch (max) {\n        case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n        case g: h = (b - r) / d + 2; break;\n        case b: h = (r - g) / d + 4; break;\n      }\n      h /= 6;\n    }\n    \n    // Apply shifts\n    h = (h * 360 + hueShift) % 360;\n    if (h < 0) h += 360;\n    s = Math.max(0, Math.min(1, s + satShift));\n    l = Math.max(0, Math.min(1, l + lightShift));\n    \n    // Convert back to RGB\n    const hueToRgb = (p: number, q: number, t: number) => {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1/6) return p + (q - p) * 6 * t;\n      if (t < 1/2) return q;\n      if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n      return p;\n    };\n    \n    let rOut, gOut, bOut;\n    if (s === 0) {\n      rOut = gOut = bOut = l;\n    } else {\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      const p = 2 * l - q;\n      rOut = hueToRgb(p, q, (h / 360) + 1/3);\n      gOut = hueToRgb(p, q, h / 360);\n      bOut = hueToRgb(p, q, (h / 360) - 1/3);\n    }\n    \n    // Convert back to hex\n    const toHex = (c: number) => {\n      const hex = Math.round(c * 255).toString(16);\n      return hex.length === 1 ? '0' + hex : hex;\n    };\n    \n    return `#${toHex(rOut)}${toHex(gOut)}${toHex(bOut)}`;\n  }\n\n  private generateGradients(colors: any, style: string, seededRandom?: () => number, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): string {\n    if (!seededRandom) seededRandom = Math.random;\n    \n    // Meditation affects gradient smoothness and additional gradients\n    const centerOpacity = brainwaveData?.meditation ? \n      Math.max(0.7, Math.min(1, 0.8 + (brainwaveData.meditation / 100) * 0.2)) : 0.9;\n    const outerOpacity = brainwaveData?.meditation ?\n      Math.max(0.8, Math.min(1, 0.9 + (brainwaveData.meditation / 100) * 0.1)) : 1;\n    \n    let gradients = `\n      <radialGradient id=\"bgGradient\" cx=\"50%\" cy=\"50%\" r=\"50%\">\n        <stop offset=\"0%\" style=\"stop-color:${colors.center};stop-opacity:${centerOpacity}\" />\n        <stop offset=\"100%\" style=\"stop-color:${colors.outer};stop-opacity:${outerOpacity}\" />\n      </radialGradient>\n    `;\n    \n    // Add petal gradient that varies with attention\n    const petalIntensity = brainwaveData?.attention ? \n      Math.max(0.5, Math.min(1, 0.7 + (brainwaveData.attention / 100) * 0.3)) : 0.8;\n    \n    gradients += `\n      <radialGradient id=\"petalGrad\" cx=\"50%\" cy=\"50%\" r=\"50%\">\n        <stop offset=\"0%\" style=\"stop-color:${colors.accent};stop-opacity:${petalIntensity}\" />\n        <stop offset=\"100%\" style=\"stop-color:${colors.secondary};stop-opacity:${petalIntensity * 0.6}\" />\n      </radialGradient>\n    `;\n    \n    return gradients;\n  }\n\n  private generatePatterns(colors: any, seededRandom?: () => number, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): string {\n    if (!seededRandom) seededRandom = Math.random;\n    \n    // Pattern size and spacing vary with attention level\n    const baseSize = brainwaveData?.attention ?\n      Math.max(6, Math.min(12, 8 + (brainwaveData.attention / 100) * 4)) : 8;\n    const patternSize = baseSize + seededRandom() * 2;\n    const dotRadius = brainwaveData?.attention ?\n      Math.max(1, Math.min(3, 1.5 + (brainwaveData.attention / 100) * 1.5)) : 1.5;\n    const finalRadius = dotRadius + seededRandom() * 0.5;\n    \n    // Signal quality affects opacity\n    const opacity = brainwaveData?.signalQuality ?\n      Math.max(0.4, Math.min(0.9, 0.5 + (brainwaveData.signalQuality / 100) * 0.4)) : 0.7;\n    \n    return `\n      <pattern id=\"dots\" patternUnits=\"userSpaceOnUse\" width=\"${patternSize}\" height=\"${patternSize}\">\n        <circle cx=\"${patternSize/2}\" cy=\"${patternSize/2}\" r=\"${finalRadius}\" fill=\"${colors.dots}\" opacity=\"${opacity}\"/>\n      </pattern>\n    `;\n  }\n\n  private generateFilters(seededRandom?: () => number, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): string {\n    if (!seededRandom) seededRandom = Math.random;\n    \n    // Glow intensity varies with meditation (more meditation = softer glow)\n    const glowIntensity = brainwaveData?.meditation ?\n      Math.max(1, Math.min(5, 3 + (brainwaveData.meditation / 100) * 2)) : 3;\n    \n    return `\n      <filter id=\"glow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n        <feGaussianBlur stdDeviation=\"${glowIntensity}\" result=\"coloredBlur\"/>\n        <feMerge> \n          <feMergeNode in=\"coloredBlur\"/>\n          <feMergeNode in=\"SourceGraphic\"/>\n        </feMerge>\n      </filter>\n    `;\n  }\n\n  private generateOuterRing(colors: any, style: string, seededRandom?: () => number, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): string {\n    if (!seededRandom) seededRandom = Math.random;\n    \n    let ring = '';\n    // Attention affects complexity - high attention = more petals, low attention = fewer\n    const baseCount = brainwaveData?.attention ? \n      Math.round(8 + (brainwaveData.attention / 100) * 16) : // 8-24 petals based on attention\n      12;\n    const petalCount = Math.max(6, Math.min(24, baseCount + Math.floor((seededRandom() - 0.5) * 4)));\n    \n    for (let i = 0; i < petalCount; i++) {\n      const angle = (360 / petalCount) * i;\n      const radiusVar = 170 + seededRandom() * 20; // Vary radius 170-190\n      const sizeVar = 6 + seededRandom() * 6; // Vary size 6-12\n      const innerRadius = radiusVar - 20 + seededRandom() * 10;\n      const innerSize = 2 + seededRandom() * 4;\n      \n      // High meditation = softer, flowing shapes; Low meditation = sharp, angular\n      const isFlowing = brainwaveData?.meditation && brainwaveData.meditation > 50;\n      \n      if (isFlowing) {\n        // Soft, flowing petals for high meditation\n        ring += `\n          <g transform=\"rotate(${angle})\">\n            <ellipse cx=\"0\" cy=\"-${radiusVar}\" rx=\"${sizeVar * 0.8}\" ry=\"${sizeVar * 1.5}\" fill=\"${colors.accent}\" opacity=\"${0.6 + seededRandom() * 0.3}\"/>\n            <ellipse cx=\"0\" cy=\"-${innerRadius}\" rx=\"${innerSize * 0.6}\" ry=\"${innerSize * 1.2}\" fill=\"${colors.dots}\" opacity=\"${0.7 + seededRandom() * 0.3}\"/>\n          </g>\n        `;\n      } else {\n        // Sharp, precise shapes for low meditation or high attention\n        ring += `\n          <g transform=\"rotate(${angle})\">\n            <polygon points=\"0,-${radiusVar + sizeVar} -${sizeVar * 0.6},-${radiusVar - sizeVar} ${sizeVar * 0.6},-${radiusVar - sizeVar}\" \n                     fill=\"${colors.accent}\" opacity=\"${0.6 + seededRandom() * 0.3}\"/>\n            <circle cx=\"0\" cy=\"-${innerRadius}\" r=\"${innerSize}\" fill=\"${colors.dots}\" opacity=\"${0.7 + seededRandom() * 0.3}\"/>\n          </g>\n        `;\n      }\n    }\n    return ring;\n  }\n\n  private generateMiddleRings(colors: any, style: string, seededRandom?: () => number, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): string {\n    if (!seededRandom) seededRandom = Math.random;\n    \n    const rings = [];\n    \n    // Meditation affects the number and smoothness of middle rings\n    const ringCount = brainwaveData?.meditation ? \n      Math.round(2 + (brainwaveData.meditation / 100) * 3) : // 2-5 rings based on meditation\n      3;\n    \n    for (let i = 0; i < ringCount; i++) {\n      const baseRadius = 120 - (i * 25);\n      const radiusVar = baseRadius + (seededRandom() - 0.5) * 10;\n      const strokeWidth = 1 + seededRandom() * 2;\n      const opacity = 0.4 + seededRandom() * 0.4;\n      \n      // High attention = solid circles, low attention = dashed/dotted\n      const strokePattern = brainwaveData?.attention && brainwaveData.attention > 70 ? \n        'none' : `${2 + seededRandom() * 3} ${1 + seededRandom() * 2}`;\n      \n      const color = i % 2 === 0 ? colors.accent : colors.secondary;\n      \n      rings.push(`\n        <circle r=\"${radiusVar}\" fill=\"none\" stroke=\"${color}\" \n                stroke-width=\"${strokeWidth}\" opacity=\"${opacity}\"\n                ${strokePattern !== 'none' ? `stroke-dasharray=\"${strokePattern}\"` : ''}/>\n      `);\n    }\n    \n    return rings.join('');\n  }\n\n  private generateInnerPatterns(colors: any, style: string, seededRandom?: () => number, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): string {\n    if (!seededRandom) seededRandom = Math.random;\n    \n    let patterns = '';\n    \n    // Base inner circles with variation\n    const innerRadius1 = 55 + seededRandom() * 10; // 55-65\n    const innerRadius2 = 35 + seededRandom() * 10; // 35-45\n    \n    patterns += `\n      <circle r=\"${innerRadius1}\" fill=\"none\" stroke=\"${colors.tertiary}\" stroke-width=\"${1 + seededRandom()}\" opacity=\"${0.6 + seededRandom() * 0.3}\"/>\n      <circle r=\"${innerRadius2}\" fill=\"none\" stroke=\"${colors.dots}\" stroke-width=\"${0.5 + seededRandom() * 1}\" opacity=\"${0.7 + seededRandom() * 0.3}\"/>\n    `;\n    \n    // Add geometric patterns based on signal quality and attention\n    const patternCount = brainwaveData?.signalQuality ? \n      Math.round(3 + (brainwaveData.signalQuality / 100) * 5) : 4; // 3-8 patterns\n    \n    for (let i = 0; i < patternCount; i++) {\n      const angle = (360 / patternCount) * i;\n      const radius = 25 + seededRandom() * 15;\n      const size = 2 + seededRandom() * 3;\n      \n      if (brainwaveData?.attention && brainwaveData.attention > 60) {\n        // High attention = geometric precision\n        patterns += `\n          <g transform=\"rotate(${angle})\">\n            <rect x=\"-${size/2}\" y=\"-${radius + size/2}\" width=\"${size}\" height=\"${size}\" \n                  fill=\"${colors.accent}\" opacity=\"${0.5 + seededRandom() * 0.3}\" transform=\"rotate(45)\"/>\n          </g>\n        `;\n      } else {\n        // Lower attention = organic circles\n        patterns += `\n          <g transform=\"rotate(${angle})\">\n            <circle cx=\"0\" cy=\"-${radius}\" r=\"${size}\" fill=\"${colors.secondary}\" opacity=\"${0.5 + seededRandom() * 0.3}\"/>\n          </g>\n        `;\n      }\n    }\n    \n    return patterns;\n  }\n\n  private generateDetailedPetals(colors: any, style: string, seededRandom?: () => number, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): string {\n    if (!seededRandom) seededRandom = Math.random;\n    \n    let petals = '';\n    // Meditation affects petal count and style\n    const baseCount = brainwaveData?.meditation ? \n      Math.round(6 + (brainwaveData.meditation / 100) * 6) : 8; // 6-12 petals\n    const count = Math.max(4, Math.min(16, baseCount + Math.floor((seededRandom() - 0.5) * 4)));\n    \n    for (let i = 0; i < count; i++) {\n      const angle = (360 / count) * i;\n      const radius = 45 + seededRandom() * 15;\n      const size = 4 + seededRandom() * 6;\n      const opacity = 0.5 + seededRandom() * 0.4;\n      \n      petals += `\n        <g transform=\"rotate(${angle})\">\n          <circle cx=\"0\" cy=\"-${radius}\" r=\"${size}\" fill=\"${colors.accent}\" opacity=\"${opacity}\"/>\n        </g>\n      `;\n    }\n    return petals;\n  }\n\n  private generateSacredGeometry(colors: any, style: string, seededRandom?: () => number, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): string {\n    if (!seededRandom) seededRandom = Math.random;\n    \n    let geometry = '';\n    \n    // Base sacred circle with variation\n    const baseRadius = 28 + seededRandom() * 8;\n    geometry += `<circle r=\"${baseRadius}\" fill=\"none\" stroke=\"${colors.dots}\" stroke-width=\"${0.5 + seededRandom()}\" opacity=\"${0.4 + seededRandom() * 0.3}\"/>`;\n    \n    // Create sacred geometric patterns - triangles pointing inward/outward\n    const triangleCount = 6;\n    for (let i = 0; i < triangleCount; i++) {\n      const angle = (360 / triangleCount) * i;\n      const size = 6 + seededRandom() * 4;\n      const radius = 70 + seededRandom() * 15;\n      \n      geometry += `\n        <g transform=\"rotate(${angle})\">\n          <polygon points=\"0,-${radius + size} -${size * 0.866},-${radius - size/2} ${size * 0.866},-${radius - size/2}\" \n                   fill=\"none\" stroke=\"${colors.tertiary}\" stroke-width=\"1\" opacity=\"${0.3 + seededRandom() * 0.3}\"/>\n        </g>\n      `;\n    }\n    \n    return geometry;\n  }\n\n  private generateDotPatterns(colors: any, style: string, seededRandom?: () => number, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): string {\n    if (!seededRandom) seededRandom = Math.random;\n    \n    let dots = '';\n    const ringCount = brainwaveData?.signalQuality ? Math.round(2 + (brainwaveData.signalQuality / 100) * 3) : 3; // 2-5 rings\n    \n    for (let ring = 0; ring < ringCount; ring++) {\n      const baseRadius = 20 + ring * 15;\n      const radius = baseRadius + seededRandom() * 5;\n      const dotCount = Math.floor(radius / 3) + Math.floor(seededRandom() * 4);\n      \n      for (let i = 0; i < dotCount; i++) {\n        const angle = (360 / dotCount) * i + seededRandom() * 5; // Small random angle offset\n        const x = Math.cos(angle * Math.PI / 180) * radius;\n        const y = Math.sin(angle * Math.PI / 180) * radius;\n        const dotSize = 1.5 + seededRandom() * 1.5;\n        const opacity = 0.6 + seededRandom() * 0.3;\n        \n        dots += `<circle cx=\"${x}\" cy=\"${y}\" r=\"${dotSize}\" fill=\"${colors.dots}\" opacity=\"${opacity}\"/>`;\n      }\n    }\n\n    return dots;\n  }\n\n  private generateCenterMotif(colors: any, style: string, seededRandom?: () => number, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): string {\n    if (!seededRandom) seededRandom = Math.random;\n    \n    // Center size varies with overall energy\n    const outerSize = 12 + seededRandom() * 8;\n    const middleSize = outerSize * 0.65;\n    const innerSize = outerSize * 0.3;\n    \n    return `\n      <circle r=\"${outerSize}\" fill=\"${colors.center}\" opacity=\"${0.8 + seededRandom() * 0.2}\"/>\n      <circle r=\"${middleSize}\" fill=\"${colors.accent}\" opacity=\"${0.7 + seededRandom() * 0.3}\"/>\n      <circle r=\"${innerSize}\" fill=\"${colors.dots}\" opacity=\"${0.9 + seededRandom() * 0.1}\"/>\n    `;\n  }\n}","size_bytes":39942},"SCCP1910/fecart-15-09/MandalaMind/server/services/neurosky.ts":{"content":"import { EventEmitter } from 'events';\nimport { Socket } from 'net';\nimport { BrainwaveData } from '@shared/schema';\n\nexport interface NeuroSkyConfig {\n  host?: string;\n  port?: number;\n  appName?: string;\n  appKey?: string;\n  autoConnect?: boolean;\n  demoMode?: boolean;\n  enableRawOutput?: boolean;\n}\n\nexport class NeuroSkyService extends EventEmitter {\n  private socket: Socket | null = null;\n  private isConnected = false;\n  private reconnectInterval: NodeJS.Timeout | null = null;\n  private currentData: BrainwaveData | null = null;\n  private demoInterval: NodeJS.Timeout | null = null;\n  private isDemoMode = false;\n  private isAuthenticated = false;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n\n  constructor(private config: NeuroSkyConfig = {}) {\n    super();\n    this.config = {\n      host: '127.0.0.1',\n      port: 13854, // ThinkGear Connector default port\n      appName: 'MandalaMind',\n      appKey: '0fc2141b1b45c573cc2d3a763b8d71c5bde2391b', // Default public key from NeuroSky\n      autoConnect: false,\n      demoMode: false,\n      enableRawOutput: false,\n      ...config\n    };\n    this.isDemoMode = this.config.demoMode || false;\n  }\n\n  async connect(): Promise<void> {\n    try {\n      // If in demo mode, start simulation instead of real connection\n      if (this.isDemoMode) {\n        this.startDemoMode();\n        return;\n      }\n\n      // Check if ThinkGear Connector is available first\n      const isAvailable = await NeuroSkyService.checkThinkGearConnector();\n      if (!isAvailable) {\n        throw new Error('ThinkGear Connector is not running. Please start the ThinkGear Connector application and ensure your NeuroSky device is connected.');\n      }\n\n      // Connect to ThinkGear Connector using TCP Socket\n      this.socket = new Socket();\n      this.isConnected = false;\n      this.isAuthenticated = false;\n      \n      this.socket.on('connect', () => {\n        console.log('Connected to NeuroSky ThinkGear Connector');\n        this.isConnected = true;\n        \n        // Send authentication message as required by ThinkGear Connector\n        const authMessage = {\n          appName: this.config.appName || 'MandalaMind',\n          appKey: this.config.appKey || '0fc2141b1b45c573cc2d3a763b8d71c5bde2391b',\n          format: 'Json',\n          enableRawOutput: this.config.enableRawOutput || false\n        };\n        \n        this.socket!.write(JSON.stringify(authMessage));\n        console.log('Sent authentication to ThinkGear Connector:', authMessage.appName);\n      });\n\n      this.socket.on('data', (data: Buffer) => {\n        try {\n          const dataStr = data.toString().trim();\n          // Handle multiple JSON messages in one data packet\n          const lines = dataStr.split('\\n').filter(line => line.trim());\n          \n          for (const line of lines) {\n            try {\n              const message = JSON.parse(line);\n              this.handleThinkGearMessage(message);\n            } catch (parseError) {\n              console.error('Error parsing ThinkGear message line:', line, parseError);\n            }\n          }\n        } catch (error) {\n          console.error('Error processing ThinkGear data:', error);\n        }\n      });\n\n      this.socket.on('close', () => {\n        console.log('NeuroSky connection closed');\n        this.isConnected = false;\n        this.isAuthenticated = false;\n        this.emit('disconnected');\n        \n        if (this.config.autoConnect && this.reconnectAttempts < this.maxReconnectAttempts) {\n          this.scheduleReconnect();\n        }\n      });\n\n      this.socket.on('error', (error: any) => {\n        console.error('NeuroSky connection error:', error);\n        this.isConnected = false;\n        this.isAuthenticated = false;\n        \n        let errorMessage = error.message || 'Connection error';\n        if (error.code === 'ECONNREFUSED') {\n          errorMessage = 'ThinkGear Connector is not running. Please start the ThinkGear Connector application, connect your NeuroSky device, and try again.';\n        } else if (error.code === 'ENOTFOUND') {\n          errorMessage = 'Cannot reach ThinkGear Connector. Please ensure it is installed and running.';\n        }\n        \n        this.emit('error', new Error(errorMessage));\n      });\n\n      // Connect to the ThinkGear Connector\n      this.socket.connect(this.config.port!, this.config.host!);\n      \n    } catch (error) {\n      console.error('Failed to connect to NeuroSky:', error);\n      this.reconnectAttempts++;\n      throw error;\n    }\n  }\n\n  private handleThinkGearMessage(message: any): void {\n    // Handle authentication response first\n    if (!this.isAuthenticated) {\n      if (message.status && message.status === 'success') {\n        this.isAuthenticated = true;\n        this.reconnectAttempts = 0; // Reset on successful connection\n        console.log('ThinkGear Connector authentication successful');\n        this.emit('connected');\n        return;\n      } else if (message.status && message.status === 'error') {\n        console.error('ThinkGear Connector authentication failed:', message.message);\n        this.emit('error', new Error(`Authentication failed: ${message.message || 'Invalid app key'}`));\n        return;\n      }\n    }\n\n    // Handle data messages only after authentication\n    if (!this.isAuthenticated) {\n      return;\n    }\n\n    // ThinkGear JSON format includes eSense values and signal quality\n    const data: Partial<BrainwaveData> = {};\n    let hasValidData = false;\n\n    // Extract eSense data (attention and meditation)\n    if (message.eSense && typeof message.eSense === 'object') {\n      if (typeof message.eSense.attention === 'number' && message.eSense.attention >= 0) {\n        data.attention = Math.min(100, Math.max(0, message.eSense.attention));\n        hasValidData = true;\n      }\n      if (typeof message.eSense.meditation === 'number' && message.eSense.meditation >= 0) {\n        data.meditation = Math.min(100, Math.max(0, message.eSense.meditation));\n        hasValidData = true;\n      }\n    }\n\n    // Extract signal quality from poorSignalLevel\n    if (typeof message.poorSignalLevel === 'number') {\n      // Convert poor signal level (0-200) to signal quality (100-0)\n      // 0 = perfect signal, 200 = no signal\n      const signalQuality = Math.max(0, Math.min(100, 100 - (message.poorSignalLevel / 200) * 100));\n      data.signalQuality = Math.round(signalQuality);\n      hasValidData = true;\n    }\n\n    // Only emit data if we have valid measurements\n    if (hasValidData) {\n      this.currentData = {\n        attention: data.attention ?? this.currentData?.attention ?? 0,\n        meditation: data.meditation ?? this.currentData?.meditation ?? 0,\n        signalQuality: data.signalQuality ?? this.currentData?.signalQuality ?? 0,\n        timestamp: Date.now()\n      };\n\n      this.emit('data', this.currentData);\n    }\n\n    // Handle blink detection\n    if (typeof message.blinkStrength === 'number' && message.blinkStrength > 0) {\n      this.emit('blink', { strength: message.blinkStrength, timestamp: Date.now() });\n    }\n\n    // Handle raw EEG data if enabled\n    if (typeof message.rawEeg === 'number') {\n      this.emit('rawEeg', { value: message.rawEeg, timestamp: Date.now() });\n    }\n\n    // Handle EEG power bands if available\n    if (message.eegPower && typeof message.eegPower === 'object') {\n      this.emit('eegPower', { \n        ...message.eegPower, \n        timestamp: Date.now() \n      });\n    }\n  }\n\n  private scheduleReconnect(): void {\n    if (this.reconnectInterval) {\n      clearTimeout(this.reconnectInterval);\n    }\n\n    // Only attempt reconnection if auto-connect is enabled and haven't exceeded max attempts\n    if (this.config.autoConnect && this.reconnectAttempts < this.maxReconnectAttempts) {\n      const delay = Math.min(30000, 5000 * Math.pow(2, this.reconnectAttempts)); // Exponential backoff, max 30s\n      \n      this.reconnectInterval = setTimeout(() => {\n        this.reconnectAttempts++;\n        console.log(`Attempting to reconnect to NeuroSky... (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.connect().catch(error => {\n          console.error('Reconnection failed:', error);\n          if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n            console.log('Max reconnection attempts reached. Stopping automatic reconnection.');\n            this.emit('error', new Error('Could not reconnect to ThinkGear Connector after multiple attempts.'));\n          }\n        });\n      }, delay);\n    }\n  }\n\n  disconnect(): void {\n    if (this.reconnectInterval) {\n      clearTimeout(this.reconnectInterval);\n      this.reconnectInterval = null;\n    }\n\n    if (this.demoInterval) {\n      clearInterval(this.demoInterval);\n      this.demoInterval = null;\n    }\n\n    if (this.socket) {\n      this.socket.destroy();\n      this.socket = null;\n    }\n\n    this.isConnected = false;\n    this.isAuthenticated = false;\n    this.isDemoMode = false;\n    this.reconnectAttempts = 0;\n    this.emit('disconnected');\n  }\n\n  getConnectionStatus(): boolean {\n    return this.isConnected;\n  }\n\n  getCurrentData(): BrainwaveData | null {\n    return this.currentData;\n  }\n\n  enableDemoMode(): void {\n    this.isDemoMode = true;\n    this.config.demoMode = true;\n    \n    // Disconnect any real connection first\n    if (this.socket) {\n      this.socket.destroy();\n      this.socket = null;\n    }\n    \n    // Clear any existing intervals\n    if (this.reconnectInterval) {\n      clearTimeout(this.reconnectInterval);\n      this.reconnectInterval = null;\n    }\n    \n    // Start demo mode immediately\n    this.startDemoMode();\n  }\n\n  disableDemoMode(): void {\n    this.isDemoMode = false;\n    this.config.demoMode = false;\n    if (this.demoInterval) {\n      clearInterval(this.demoInterval);\n      this.demoInterval = null;\n    }\n    this.isConnected = false;\n    this.emit('disconnected');\n    \n    // Clear any socket connection if exists\n    if (this.socket) {\n      this.socket.destroy();\n      this.socket = null;\n    }\n  }\n\n  private startDemoMode(): void {\n    console.log('Starting NeuroSky demo mode');\n    this.isConnected = true;\n    this.emit('connected');\n\n    // Generate realistic demo data every 250ms (4Hz)\n    this.demoInterval = setInterval(() => {\n      this.generateDemoData();\n    }, 250);\n  }\n\n  private generateDemoData(): void {\n    // Generate more sophisticated demo data that simulates different mental states\n    const time = Date.now() / 1000;\n    \n    // Create different phases of meditation/concentration\n    const phase = Math.floor(time / 30) % 4; // 30-second phases\n    \n    let baseAttention: number;\n    let baseMeditation: number;\n    let signalVariation: number;\n    \n    switch (phase) {\n      case 0: // Settling in phase\n        baseAttention = 20 + 15 * Math.sin(time * 0.02);\n        baseMeditation = 15 + 20 * Math.sin(time * 0.015);\n        signalVariation = 15;\n        break;\n      case 1: // Building focus\n        baseAttention = 45 + 25 * Math.sin(time * 0.01);\n        baseMeditation = 30 + 25 * Math.cos(time * 0.012);\n        signalVariation = 10;\n        break;\n      case 2: // Deep meditation\n        baseAttention = 25 + 15 * Math.sin(time * 0.008);\n        baseMeditation = 60 + 20 * Math.cos(time * 0.01);\n        signalVariation = 8;\n        break;\n      default: // Mixed state\n        baseAttention = 40 + 20 * Math.sin(time * 0.015);\n        baseMeditation = 45 + 15 * Math.cos(time * 0.018);\n        signalVariation = 12;\n    }\n    \n    // Add realistic noise and micro-fluctuations\n    const attention = Math.max(0, Math.min(100, Math.round(\n      baseAttention + \n      signalVariation * (Math.random() - 0.5) + \n      3 * Math.sin(time * 0.5) + // Breathing influence\n      2 * Math.sin(time * 2) // Micro-movements\n    )));\n    \n    const meditation = Math.max(0, Math.min(100, Math.round(\n      baseMeditation + \n      (signalVariation * 0.8) * (Math.random() - 0.5) + \n      4 * Math.cos(time * 0.3) + // Relaxation waves\n      1.5 * Math.cos(time * 1.5) // Natural variance\n    )));\n    \n    // Signal quality with occasional drops (headset movement simulation)\n    let baseSignalQuality = 88 + 8 * Math.sin(time * 0.003);\n    if (Math.random() < 0.05) { // 5% chance of signal drop\n      baseSignalQuality -= 20 + 15 * Math.random();\n    }\n    \n    const signalQuality = Math.max(30, Math.min(100, Math.round(\n      baseSignalQuality + 6 * (Math.random() - 0.5)\n    )));\n\n    this.currentData = {\n      attention,\n      meditation,\n      signalQuality,\n      timestamp: Date.now()\n    };\n\n    this.emit('data', this.currentData);\n\n    // More realistic blink patterns\n    const blinkChance = 0.015 + 0.01 * Math.sin(time * 0.1); // Variable blink rate\n    if (Math.random() < blinkChance) {\n      const strength = Math.round(25 + 40 * Math.random());\n      this.emit('blink', { strength, timestamp: Date.now() });\n    }\n    \n    // Simulate EEG power bands occasionally\n    if (Math.random() < 0.1) { // 10% chance\n      this.emit('eegPower', {\n        delta: Math.round(200000 + 100000 * Math.random()),\n        theta: Math.round(15000 + 10000 * Math.random()),\n        lowAlpha: Math.round(2000 + 3000 * Math.random()),\n        highAlpha: Math.round(1500 + 2000 * Math.random()),\n        lowBeta: Math.round(800 + 1200 * Math.random()),\n        highBeta: Math.round(600 + 800 * Math.random()),\n        lowGamma: Math.round(400 + 600 * Math.random()),\n        highGamma: Math.round(200 + 400 * Math.random()),\n        timestamp: Date.now()\n      });\n    }\n  }\n\n  // Static method to check if ThinkGear Connector is available\n  static async checkThinkGearConnector(host: string = '127.0.0.1', port: number = 13854): Promise<boolean> {\n    return new Promise((resolve) => {\n      const testSocket = new Socket();\n      const timeout = setTimeout(() => {\n        testSocket.destroy();\n        resolve(false);\n      }, 3000);\n\n      testSocket.on('connect', () => {\n        clearTimeout(timeout);\n        testSocket.destroy();\n        resolve(true);\n      });\n\n      testSocket.on('error', () => {\n        clearTimeout(timeout);\n        testSocket.destroy();\n        resolve(false);\n      });\n\n      testSocket.connect(port, host);\n    });\n  }\n\n  // Get detailed connection information\n  getConnectionInfo() {\n    return {\n      isConnected: this.isConnected,\n      isAuthenticated: this.isAuthenticated,\n      isDemoMode: this.isDemoMode,\n      reconnectAttempts: this.reconnectAttempts,\n      maxReconnectAttempts: this.maxReconnectAttempts,\n      config: {\n        host: this.config.host,\n        port: this.config.port,\n        appName: this.config.appName\n      }\n    };\n  }\n\n  // Reset reconnection attempts\n  resetReconnectionAttempts(): void {\n    this.reconnectAttempts = 0;\n  }\n}\n","size_bytes":14741},"SCCP1910/fecart-15-09/MandalaMind/server/services/openai.ts":{"content":"import OpenAI from \"openai\";\nimport { BrainwaveData } from \"@shared/schema\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR\n});\n\nexport interface MandalaGenerationOptions {\n  voiceTranscript: string;\n  brainwaveData: BrainwaveData;\n  style?: 'traditional' | 'modern' | 'abstract' | 'spiritual';\n  colorPalette?: 'warm' | 'cool' | 'vibrant' | 'monochrome';\n}\n\nexport interface GeneratedMandala {\n  imageUrl: string;\n  prompt: string;\n  revisedPrompt?: string;\n}\n\nexport class OpenAIService {\n  \n  async generateMandalaPrompt(options: MandalaGenerationOptions): Promise<string> {\n    const { voiceTranscript, brainwaveData, style = 'spiritual', colorPalette = 'vibrant' } = options;\n    \n    // Try OpenAI first with retry logic\n    for (let attempt = 1; attempt <= 3; attempt++) {\n      try {\n        // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n        const response = await openai.chat.completions.create({\n          model: \"gpt-5\",\n          messages: [\n          {\n            role: \"system\",\n            content: `You are an AI that creates detailed mandala generation prompts by analyzing brain wave data and voice transcripts. \n\nCreate mandala prompts that reflect the beautiful traditional dot painting style with:\n- Intricate concentric circles made of small dots in various sizes\n- Deep blue background with radiating dotted patterns  \n- Lotus-like flower patterns with detailed petal work\n- Sacred geometric patterns using dot work technique\n- White and light blue dots creating luminous effects against dark blue\n- Multiple layers of circular patterns from center outward\n- Traditional spiritual symbolism expressed through dot art\n\nYour task is to create a beautiful, spiritually meaningful mandala prompt that reflects:\n1. The person's mental state based on their brain waves\n2. The emotional content and themes from their voice transcript\n3. Traditional dot painting mandala style with intricate geometric patterns\n\nAlways respond in English regardless of the input language, as the image generation requires English prompts.`\n          },\n          {\n            role: \"user\",\n            content: `Please create a mandala generation prompt based on this data:\n\nVoice Transcript: \"${voiceTranscript}\"\n\nBrain Wave Data:\n- Attention Level: ${brainwaveData.attention}% (0-100, higher = more focused)\n- Meditation Level: ${brainwaveData.meditation}% (0-100, higher = more relaxed/meditative)\n- Signal Quality: ${brainwaveData.signalQuality}% (connection quality)\n\nStyle Preference: ${style}\nColor Palette: ${colorPalette}\n\nGuidelines:\n- High attention (>70%) = sharp, precise dot patterns, focused geometric energy\n- High meditation (>70%) = flowing, soft dot gradients, peaceful circular patterns\n- Balanced levels = harmonious, symmetrical dot work designs\n- Low signal quality should be noted but not prevent generation\n\nExtract emotional themes, spiritual concepts, and energy patterns from the voice transcript.\nIncorporate traditional dot painting mandala elements:\n- Concentric circles of dots in various sizes\n- Sacred lotus patterns with dotted petals  \n- Deep blue base with luminous white/light blue dots\n- Radiating geometric patterns from center outward\n- Multiple layers of intricate dot work\n- Traditional spiritual symbolism expressed through dot art technique\n\nAlways create prompts in English for DALL-E compatibility, regardless of input language.\n\nRespond with JSON: { \"prompt\": \"detailed traditional dot painting mandala generation prompt in English\" }`\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.8,\n        max_tokens: 500\n      });\n\n        const result = JSON.parse(response.choices[0].message.content || '{}');\n        return result.prompt || this.getFallbackPrompt(options);\n        \n      } catch (error: any) {\n        console.error(`Error generating mandala prompt (attempt ${attempt}):`, error);\n        \n        // Check if it's a quota/billing error\n        if (error?.code === 'insufficient_quota' || error?.code === 'billing_hard_limit_reached' || error?.status === 429) {\n          console.log(`API quota exceeded on attempt ${attempt}, falling back to local generation`);\n          break; // Don't retry quota errors\n        }\n        \n        // For other errors, wait before retrying\n        if (attempt < 3) {\n          await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));\n          continue;\n        }\n      }\n    }\n    \n    // Fallback to local prompt generation\n    console.log('Using fallback prompt generation due to API issues');\n    return this.getFallbackPrompt(options);\n  }\n\n  async generateMandalaImage(prompt: string, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): Promise<GeneratedMandala> {\n    const enhancedPrompt = `Create a detailed traditional dot painting mandala artwork: ${prompt}. \n    The mandala should be perfectly circular and symmetrical with intricate concentric circles made of small dots in various sizes. \n    Use a deep blue background with white and light blue luminous dots creating radiating patterns. \n    Include lotus-like flower patterns with detailed dotted petal work and sacred geometric patterns expressed through traditional dot art technique. \n    Multiple layers of circular dot patterns should radiate from center outward. \n    The style should be spiritual, meditative, and reminiscent of traditional Aboriginal dot painting techniques adapted for mandala art. \n    Ensure the mandala is perfectly centered and fills the entire circular frame.`;\n\n    // Try OpenAI DALL-E with retry logic\n    for (let attempt = 1; attempt <= 2; attempt++) {\n      try {\n        const response = await openai.images.generate({\n          model: \"dall-e-3\",\n          prompt: enhancedPrompt,\n          n: 1,\n          size: \"1024x1024\",\n          quality: \"standard\",\n          style: \"vivid\"\n        });\n\n        if (!response.data?.[0]?.url) {\n          throw new Error('No image URL received from OpenAI');\n        }\n\n        return {\n          imageUrl: response.data[0].url,\n          prompt: enhancedPrompt,\n          revisedPrompt: response.data[0].revised_prompt\n        };\n\n      } catch (error: any) {\n        console.error(`Error generating mandala image (attempt ${attempt}):`, error);\n        \n        // Check if it's a quota/billing error\n        if (error?.code === 'insufficient_quota' || error?.code === 'billing_hard_limit_reached' || error?.status === 429 || error?.status === 400) {\n          console.log(`API quota/billing issue on attempt ${attempt}, using fallback image generation`);\n          break; // Don't retry quota errors\n        }\n        \n        // For other errors, wait before retrying\n        if (attempt < 2) {\n          await new Promise(resolve => setTimeout(resolve, 2000));\n          continue;\n        }\n      }\n    }\n    \n    // Fallback to generated placeholder mandala\n    console.log('Using fallback mandala generation due to API issues');\n    return this.generateFallbackMandala(prompt, brainwaveData);\n  }\n\n  private generateFallbackMandala(prompt: string, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): GeneratedMandala {\n    // Create a data URL for a unique SVG mandala as fallback (no cache-buster for data URLs)\n    const svgMandala = this.createSVGMandala(prompt, brainwaveData);\n    const dataUrl = `data:image/svg+xml;base64,${Buffer.from(svgMandala).toString('base64')}`;\n    \n    return {\n      imageUrl: dataUrl,\n      prompt: prompt,\n      revisedPrompt: `Fallback mandala generated locally with unique variations: ${prompt}`\n    };\n  }\n\n  private createSVGMandala(prompt: string, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): string {\n    // Create a unique seed based on input to ensure variety\n    const seed = this.createSeedFromInput(prompt, brainwaveData);\n    const seededRandom = this.createSeededRandom(seed);\n    \n    // Generate colors based on prompt content with variation\n    const colors = this.extractColorsFromPrompt(prompt);\n    const mandalaStyle = this.determineMandalaStyle(prompt);\n    \n    // Add variation to the colors based on seed\n    const variantColors = this.addColorVariation(colors, seededRandom);\n    \n    return `\n      <svg width=\"512\" height=\"512\" viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\">\n        <defs>\n          ${this.generateGradients(variantColors, mandalaStyle, seededRandom)}\n          ${this.generatePatterns(variantColors, seededRandom)}\n          ${this.generateFilters()}\n        </defs>\n        \n        <!-- Background -->\n        <rect width=\"512\" height=\"512\" fill=\"url(#bgGradient)\"/>\n        \n        <!-- Multiple mandala layers with seeded variation -->\n        <g transform=\"translate(256,256)\">\n          ${this.generateOuterRing(variantColors, mandalaStyle, seededRandom)}\n          ${this.generateMiddleRings(variantColors, mandalaStyle, seededRandom)}\n          ${this.generateInnerPatterns(variantColors, mandalaStyle, seededRandom)}\n          ${this.generateDetailedPetals(variantColors, mandalaStyle, seededRandom)}\n          ${this.generateSacredGeometry(variantColors, mandalaStyle, seededRandom)}\n          ${this.generateDotPatterns(variantColors, mandalaStyle, seededRandom)}\n          ${this.generateCenterMotif(variantColors, mandalaStyle, seededRandom)}\n        </g>\n      </svg>\n    `;\n  }\n\n  private determineMandalaStyle(prompt: string): 'dotpainting' | 'geometric' | 'floral' | 'sacred' {\n    const lowerPrompt = prompt.toLowerCase();\n    \n    if (lowerPrompt.includes('dot') || lowerPrompt.includes('aboriginal')) return 'dotpainting';\n    if (lowerPrompt.includes('geometric') || lowerPrompt.includes('sacred')) return 'sacred';\n    if (lowerPrompt.includes('flower') || lowerPrompt.includes('petal')) return 'floral';\n    \n    return 'geometric'; // default\n  }\n\n  private extractColorsFromPrompt(prompt: string): { \n    center: string, outer: string, dots: string, accent: string, \n    secondary: string, tertiary: string, gradient: string[] \n  } {\n    const lowerPrompt = prompt.toLowerCase();\n    \n    // Enhanced color palettes inspired by the provided examples\n    let colors = {\n      center: '#ffffff',\n      outer: '#1a237e',\n      dots: '#e3f2fd',\n      accent: '#3949ab',\n      secondary: '#26c6da',\n      tertiary: '#42a5f5',\n      gradient: ['#e3f2fd', '#bbdefb', '#90caf9', '#64b5f6', '#42a5f5', '#2196f3', '#1976d2', '#1565c0']\n    };\n    \n    // Rainbow gradient palette\n    if (lowerPrompt.includes('rainbow') || lowerPrompt.includes('colorful') || lowerPrompt.includes('vibrant')) {\n      colors = {\n        center: '#ffffff',\n        outer: '#9c27b0',\n        dots: '#e91e63',\n        accent: '#ff9800',\n        secondary: '#4caf50',\n        tertiary: '#2196f3',\n        gradient: ['#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#00bcd4', '#009688', '#4caf50', '#8bc34a', '#cddc39', '#ffeb3b', '#ffc107', '#ff9800']\n      };\n    }\n    \n    // Turquoise and teal palette\n    if (lowerPrompt.includes('ocean') || lowerPrompt.includes('water') || lowerPrompt.includes('teal')) {\n      colors = {\n        center: '#ffffff',\n        outer: '#004d40',\n        dots: '#b2dfdb',\n        accent: '#00897b',\n        secondary: '#26a69a',\n        tertiary: '#4db6ac',\n        gradient: ['#e0f2f1', '#b2dfdb', '#80cbc4', '#4db6ac', '#26a69a', '#009688', '#00796b', '#00695c']\n      };\n    }\n    \n    // Peace and calm - deeper blues\n    if (lowerPrompt.includes('peace') || lowerPrompt.includes('calm') || lowerPrompt.includes('meditation')) {\n      colors.outer = '#0d47a1';\n      colors.accent = '#1976d2';\n      colors.secondary = '#1e88e5';\n      colors.gradient = ['#f3e5f5', '#e1bee7', '#ce93d8', '#ba68c8', '#ab47bc', '#9c27b0', '#8e24aa', '#7b1fa2'];\n    }\n    \n    // Energy and vitality - warm colors\n    if (lowerPrompt.includes('energy') || lowerPrompt.includes('power') || lowerPrompt.includes('strength')) {\n      colors = {\n        center: '#fff3e0',\n        outer: '#e65100',\n        dots: '#ffffff',\n        accent: '#ff5722',\n        secondary: '#ff7043',\n        tertiary: '#ff8a65',\n        gradient: ['#fff3e0', '#ffe0b2', '#ffcc80', '#ffb74d', '#ffa726', '#ff9800', '#fb8c00', '#f57400', '#ef6c00', '#e65100']\n      };\n    }\n    \n    // Healing and balance - greens and blues\n    if (lowerPrompt.includes('healing') || lowerPrompt.includes('balance') || lowerPrompt.includes('nature')) {\n      colors = {\n        center: '#e8f5e8',\n        outer: '#1b5e20',\n        dots: '#c8e6c9',\n        accent: '#388e3c',\n        secondary: '#43a047',\n        tertiary: '#66bb6a',\n        gradient: ['#e8f5e8', '#c8e6c9', '#a5d6a7', '#81c784', '#66bb6a', '#4caf50', '#43a047', '#388e3c', '#2e7d32', '#1b5e20']\n      };\n    }\n    \n    return colors;\n  }\n\n  private generateGradients(colors: any, style: string, seededRandom?: () => number): string {\n    return `\n      <!-- Main background gradient -->\n      <radialGradient id=\"bgGradient\" cx=\"50%\" cy=\"50%\" r=\"50%\">\n        <stop offset=\"0%\" style=\"stop-color:${colors.center};stop-opacity:1\" />\n        <stop offset=\"30%\" style=\"stop-color:${colors.gradient[2]};stop-opacity:0.9\" />\n        <stop offset=\"70%\" style=\"stop-color:${colors.gradient[5]};stop-opacity:0.8\" />\n        <stop offset=\"100%\" style=\"stop-color:${colors.outer};stop-opacity:1\" />\n      </radialGradient>\n\n      <!-- Petal gradients -->\n      <linearGradient id=\"petalGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n        <stop offset=\"0%\" style=\"stop-color:${colors.accent};stop-opacity:0.9\" />\n        <stop offset=\"50%\" style=\"stop-color:${colors.secondary};stop-opacity:0.7\" />\n        <stop offset=\"100%\" style=\"stop-color:${colors.tertiary};stop-opacity:0.8\" />\n      </linearGradient>\n\n      <!-- Rainbow gradient for vibrant mandalas -->\n      <linearGradient id=\"rainbowGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n        ${colors.gradient.map((color: string, i: number) => \n          `<stop offset=\"${(i * 100 / (colors.gradient.length - 1))}%\" style=\"stop-color:${color};stop-opacity:0.8\" />`\n        ).join('')}\n      </linearGradient>\n\n      <!-- Dot painting gradient -->\n      <radialGradient id=\"dotGrad\" cx=\"50%\" cy=\"50%\" r=\"50%\">\n        <stop offset=\"0%\" style=\"stop-color:${colors.center};stop-opacity:1\" />\n        <stop offset=\"100%\" style=\"stop-color:${colors.accent};stop-opacity:0.3\" />\n      </radialGradient>\n    `;\n  }\n\n  private generatePatterns(colors: any, seededRandom?: () => number): string {\n    return `\n      <!-- Small dot pattern -->\n      <pattern id=\"smallDots\" patternUnits=\"userSpaceOnUse\" width=\"8\" height=\"8\">\n        <circle cx=\"4\" cy=\"4\" r=\"1.5\" fill=\"${colors.dots}\" opacity=\"0.7\"/>\n      </pattern>\n\n      <!-- Medium dot pattern -->\n      <pattern id=\"mediumDots\" patternUnits=\"userSpaceOnUse\" width=\"16\" height=\"16\">\n        <circle cx=\"8\" cy=\"8\" r=\"3\" fill=\"${colors.dots}\" opacity=\"0.6\"/>\n        <circle cx=\"4\" cy=\"4\" r=\"1\" fill=\"${colors.accent}\" opacity=\"0.8\"/>\n        <circle cx=\"12\" cy=\"12\" r=\"1\" fill=\"${colors.accent}\" opacity=\"0.8\"/>\n      </pattern>\n\n      <!-- Large dot pattern -->\n      <pattern id=\"largeDots\" patternUnits=\"userSpaceOnUse\" width=\"24\" height=\"24\">\n        <circle cx=\"12\" cy=\"12\" r=\"4\" fill=\"${colors.dots}\" opacity=\"0.5\"/>\n        <circle cx=\"6\" cy=\"6\" r=\"2\" fill=\"${colors.secondary}\" opacity=\"0.7\"/>\n        <circle cx=\"18\" cy=\"18\" r=\"2\" fill=\"${colors.secondary}\" opacity=\"0.7\"/>\n        <circle cx=\"18\" cy=\"6\" r=\"1.5\" fill=\"${colors.tertiary}\" opacity=\"0.9\"/>\n        <circle cx=\"6\" cy=\"18\" r=\"1.5\" fill=\"${colors.tertiary}\" opacity=\"0.9\"/>\n      </pattern>\n    `;\n  }\n\n  private generateFilters(): string {\n    return `\n      <!-- Glow effect -->\n      <filter id=\"glow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n        <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n        <feMerge> \n          <feMergeNode in=\"coloredBlur\"/>\n          <feMergeNode in=\"SourceGraphic\"/>\n        </feMerge>\n      </filter>\n\n      <!-- Drop shadow -->\n      <filter id=\"shadow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n        <feDropShadow dx=\"2\" dy=\"2\" stdDeviation=\"2\" flood-opacity=\"0.3\"/>\n      </filter>\n    `;\n  }\n\n  private generateOuterRing(colors: any, style: string, seededRandom?: () => number): string {\n    if (style === 'dotpainting') {\n      return this.generateDotPaintingRing(colors, 180, 220, seededRandom);\n    }\n\n    let ring = '';\n    const petalCount = 16;\n    for (let i = 0; i < petalCount; i++) {\n      const angle = (360 / petalCount) * i;\n      ring += `\n        <g transform=\"rotate(${angle})\">\n          <path d=\"M0,-200 Q-15,-180 -8,-160 Q0,-150 8,-160 Q15,-180 0,-200 Z\" \n                fill=\"url(#petalGrad)\" opacity=\"0.8\" filter=\"url(#glow)\"/>\n          <path d=\"M0,-190 Q-8,-175 -4,-165 Q0,-160 4,-165 Q8,-175 0,-190 Z\" \n                fill=\"${colors.dots}\" opacity=\"0.9\"/>\n          <!-- Decorative dots -->\n          <circle cx=\"0\" cy=\"-185\" r=\"2\" fill=\"${colors.center}\" opacity=\"0.9\"/>\n          <circle cx=\"0\" cy=\"-170\" r=\"1.5\" fill=\"${colors.tertiary}\" opacity=\"0.8\"/>\n        </g>\n      `;\n    }\n    return ring;\n  }\n\n  private generateMiddleRings(colors: any, style: string, seededRandom?: () => number): string {\n    if (style === 'dotpainting') {\n      return this.generateDotPaintingRing(colors, 120, 160, seededRandom) + this.generateDotPaintingRing(colors, 80, 110, seededRandom);\n    }\n\n    let rings = '';\n    // Decorative ring at radius 150\n    const petals1 = 12;\n    for (let i = 0; i < petals1; i++) {\n      const angle = (360 / petals1) * i;\n      rings += `\n        <g transform=\"rotate(${angle})\">\n          <ellipse cx=\"0\" cy=\"-150\" rx=\"12\" ry=\"25\" fill=\"${colors.secondary}\" opacity=\"0.7\"/>\n          <ellipse cx=\"0\" cy=\"-145\" rx=\"6\" ry=\"15\" fill=\"${colors.center}\" opacity=\"0.9\"/>\n          <circle cx=\"0\" cy=\"-135\" r=\"3\" fill=\"${colors.accent}\" opacity=\"0.8\"/>\n        </g>\n      `;\n    }\n\n    // Inner decorative ring at radius 100\n    const petals2 = 8;\n    for (let i = 0; i < petals2; i++) {\n      const angle = (360 / petals2) * i;\n      rings += `\n        <g transform=\"rotate(${angle})\">\n          <path d=\"M0,-100 Q-10,-85 -5,-75 Q0,-70 5,-75 Q10,-85 0,-100 Z\" \n                fill=\"url(#rainbowGrad)\" opacity=\"0.6\"/>\n          <path d=\"M0,-95 Q-5,-85 0,-80 Q5,-85 0,-95 Z\" \n                fill=\"${colors.dots}\" opacity=\"0.8\"/>\n        </g>\n      `;\n    }\n\n    return rings;\n  }\n\n  private generateInnerPatterns(colors: any, style: string, seededRandom?: () => number): string {\n    if (style === 'dotpainting') {\n      return this.generateDotPaintingRing(colors, 40, 70, seededRandom);\n    }\n\n    return `\n      <!-- Concentric circles with intricate patterns -->\n      <circle r=\"70\" fill=\"none\" stroke=\"${colors.accent}\" stroke-width=\"2\" opacity=\"0.8\" stroke-dasharray=\"10,5\"/>\n      <circle r=\"65\" fill=\"none\" stroke=\"${colors.secondary}\" stroke-width=\"1\" opacity=\"0.6\"/>\n      <circle r=\"55\" fill=\"none\" stroke=\"${colors.tertiary}\" stroke-width=\"2\" opacity=\"0.7\" stroke-dasharray=\"3,3\"/>\n      <circle r=\"50\" fill=\"none\" stroke=\"${colors.dots}\" stroke-width=\"1\" opacity=\"0.8\"/>\n      \n      <!-- Geometric pattern -->\n      ${this.generateStarPattern(colors, 60, 8)}\n      ${this.generateStarPattern(colors, 45, 6)}\n    `;\n  }\n\n  private generateDetailedPetals(colors: any, style: string, seededRandom?: () => number): string {\n    if (style === 'floral') {\n      return this.generateFloralPetals(colors, seededRandom);\n    }\n    \n    let petals = '';\n    const count = 6;\n    for (let i = 0; i < count; i++) {\n      const angle = (360 / count) * i;\n      petals += `\n        <g transform=\"rotate(${angle})\">\n          <!-- Main petal -->\n          <path d=\"M0,-35 Q-12,-25 -8,-15 Q-4,-8 0,-10 Q4,-8 8,-15 Q12,-25 0,-35 Z\" \n                fill=\"url(#petalGrad)\" opacity=\"0.8\" filter=\"url(#shadow)\"/>\n          <!-- Inner petal detail -->\n          <path d=\"M0,-30 Q-6,-22 -3,-18 Q0,-15 3,-18 Q6,-22 0,-30 Z\" \n                fill=\"${colors.center}\" opacity=\"0.9\"/>\n          <!-- Petal lines -->\n          <line x1=\"0\" y1=\"-30\" x2=\"0\" y2=\"-15\" stroke=\"${colors.accent}\" stroke-width=\"0.5\" opacity=\"0.7\"/>\n          <line x1=\"-2\" y1=\"-25\" x2=\"2\" y2=\"-20\" stroke=\"${colors.secondary}\" stroke-width=\"0.3\" opacity=\"0.6\"/>\n        </g>\n      `;\n    }\n    return petals;\n  }\n\n  private generateSacredGeometry(colors: any, style: string, seededRandom?: () => number): string {\n    if (style === 'sacred') {\n      return this.generateFlowerOfLife(colors, seededRandom) + this.generateSeedOfLife(colors, seededRandom);\n    }\n\n    return `\n      <!-- Simplified sacred geometry -->\n      <g opacity=\"0.5\">\n        <circle r=\"25\" fill=\"none\" stroke=\"${colors.dots}\" stroke-width=\"1\"/>\n        <circle cx=\"21.7\" cy=\"12.5\" r=\"25\" fill=\"none\" stroke=\"${colors.dots}\" stroke-width=\"1\"/>\n        <circle cx=\"-21.7\" cy=\"12.5\" r=\"25\" fill=\"none\" stroke=\"${colors.dots}\" stroke-width=\"1\"/>\n        <circle cx=\"21.7\" cy=\"-12.5\" r=\"25\" fill=\"none\" stroke=\"${colors.dots}\" stroke-width=\"1\"/>\n        <circle cx=\"-21.7\" cy=\"-12.5\" r=\"25\" fill=\"none\" stroke=\"${colors.dots}\" stroke-width=\"1\"/>\n        <circle cx=\"0\" cy=\"25\" r=\"25\" fill=\"none\" stroke=\"${colors.dots}\" stroke-width=\"1\"/>\n        <circle cx=\"0\" cy=\"-25\" r=\"25\" fill=\"none\" stroke=\"${colors.dots}\" stroke-width=\"1\"/>\n      </g>\n    `;\n  }\n\n  private generateDotPatterns(colors: any, style: string, seededRandom?: () => number): string {\n    if (style !== 'dotpainting') return '';\n\n    let dots = '';\n    // Create intricate dot patterns like in the reference image\n    const rings = [30, 50, 70, 90, 110, 130, 150, 170];\n    \n    rings.forEach((radius, ringIndex) => {\n      const dotCount = Math.floor(radius / 3);\n      for (let i = 0; i < dotCount; i++) {\n        const angle = (360 / dotCount) * i;\n        const x = Math.cos(angle * Math.PI / 180) * radius;\n        const y = Math.sin(angle * Math.PI / 180) * radius;\n        \n        const dotSize = 1.5 + Math.sin(ringIndex * 0.5) * 1;\n        const opacity = 0.7 + Math.sin(i * 0.3) * 0.3;\n        \n        dots += `<circle cx=\"${x}\" cy=\"${y}\" r=\"${dotSize}\" fill=\"${colors.dots}\" opacity=\"${opacity}\"/>`;\n        \n        // Add smaller accent dots\n        if (i % 3 === 0) {\n          const accentX = Math.cos((angle + 15) * Math.PI / 180) * (radius - 5);\n          const accentY = Math.sin((angle + 15) * Math.PI / 180) * (radius - 5);\n          dots += `<circle cx=\"${accentX}\" cy=\"${accentY}\" r=\"0.8\" fill=\"${colors.secondary}\" opacity=\"0.9\"/>`;\n        }\n      }\n    });\n\n    return dots;\n  }\n\n  private generateCenterMotif(colors: any, style: string, seededRandom?: () => number): string {\n    if (style === 'dotpainting') {\n      return `\n        <!-- Center dot pattern -->\n        <circle r=\"15\" fill=\"${colors.outer}\" opacity=\"0.8\"/>\n        <circle r=\"12\" fill=\"${colors.dots}\" opacity=\"0.9\"/>\n        <circle r=\"8\" fill=\"${colors.accent}\" opacity=\"0.8\"/>\n        <circle r=\"5\" fill=\"${colors.center}\" opacity=\"1\"/>\n        <circle r=\"2\" fill=\"${colors.outer}\" opacity=\"0.9\"/>\n      `;\n    }\n\n    return `\n      <!-- Ornate center -->\n      <circle r=\"20\" fill=\"url(#dotGrad)\" opacity=\"0.8\"/>\n      <circle r=\"15\" fill=\"none\" stroke=\"${colors.accent}\" stroke-width=\"2\" opacity=\"0.9\"/>\n      <circle r=\"10\" fill=\"${colors.center}\" opacity=\"0.9\"/>\n      <circle r=\"6\" fill=\"none\" stroke=\"${colors.secondary}\" stroke-width=\"1\" opacity=\"0.8\"/>\n      <circle r=\"3\" fill=\"${colors.accent}\" opacity=\"1\"/>\n    `;\n  }\n\n  // Additional helper methods for sophisticated mandala generation\n  private generateDotPaintingRing(colors: any, innerRadius: number, outerRadius: number, seededRandom?: () => number): string {\n    let dots = '';\n    const ringWidth = outerRadius - innerRadius;\n    const dotDensity = Math.floor(innerRadius / 5); // Varies dot density based on radius\n    \n    for (let radius = innerRadius; radius <= outerRadius; radius += 4) {\n      const circumference = 2 * Math.PI * radius;\n      const dotCount = Math.floor(circumference / 8);\n      \n      for (let i = 0; i < dotCount; i++) {\n        const angle = (360 / dotCount) * i;\n        const x = Math.cos(angle * Math.PI / 180) * radius;\n        const y = Math.sin(angle * Math.PI / 180) * radius;\n        \n        // Vary dot sizes and colors for authentic dot painting look\n        const random = seededRandom || Math.random;\n        const dotSize = 1 + random() * 2;\n        const opacity = 0.6 + random() * 0.4;\n        const colorVariant = random() > 0.7 ? colors.secondary : colors.dots;\n        \n        dots += `<circle cx=\"${x}\" cy=\"${y}\" r=\"${dotSize}\" fill=\"${colorVariant}\" opacity=\"${opacity}\"/>`;\n        \n        // Add tiny highlight dots\n        if (random() > 0.8) {\n          dots += `<circle cx=\"${x}\" cy=\"${y}\" r=\"0.5\" fill=\"${colors.center}\" opacity=\"0.9\"/>`;\n        }\n      }\n    }\n    \n    return dots;\n  }\n\n  private generateStarPattern(colors: any, radius: number, points: number): string {\n    let pattern = '';\n    const outerRadius = radius;\n    const innerRadius = radius * 0.6;\n    \n    let pathData = 'M';\n    for (let i = 0; i <= points * 2; i++) {\n      const angle = (i * Math.PI) / points;\n      const r = i % 2 === 0 ? outerRadius : innerRadius;\n      const x = Math.cos(angle) * r;\n      const y = Math.sin(angle) * r;\n      \n      if (i === 0) {\n        pathData += `${x},${y}`;\n      } else {\n        pathData += ` L${x},${y}`;\n      }\n    }\n    pathData += ' Z';\n    \n    pattern = `\n      <path d=\"${pathData}\" fill=\"none\" stroke=\"${colors.accent}\" stroke-width=\"1.5\" opacity=\"0.7\"/>\n      <path d=\"${pathData}\" fill=\"${colors.dots}\" opacity=\"0.2\"/>\n    `;\n    \n    return pattern;\n  }\n\n  private generateFloralPetals(colors: any, seededRandom?: () => number): string {\n    let petals = '';\n    const petalSets = [\n      { count: 8, radius: 35, size: { rx: 8, ry: 20 } },\n      { count: 16, radius: 25, size: { rx: 4, ry: 12 } },\n      { count: 24, radius: 15, size: { rx: 2, ry: 8 } }\n    ];\n    \n    petalSets.forEach((set, setIndex) => {\n      for (let i = 0; i < set.count; i++) {\n        const angle = (360 / set.count) * i;\n        const colorIndex = setIndex % colors.gradient.length;\n        const petalColor = colors.gradient[colorIndex] || colors.accent;\n        \n        petals += `\n          <g transform=\"rotate(${angle})\">\n            <ellipse cx=\"0\" cy=\"-${set.radius}\" rx=\"${set.size.rx}\" ry=\"${set.size.ry}\" \n                     fill=\"${petalColor}\" opacity=\"0.8\"/>\n            <ellipse cx=\"0\" cy=\"-${set.radius}\" rx=\"${set.size.rx * 0.6}\" ry=\"${set.size.ry * 0.8}\" \n                     fill=\"${colors.center}\" opacity=\"0.6\"/>\n            <!-- Petal vein -->\n            <line x1=\"0\" y1=\"-${set.radius - set.size.ry * 0.8}\" x2=\"0\" y2=\"-${set.radius + set.size.ry * 0.8}\" \n                  stroke=\"${colors.secondary}\" stroke-width=\"0.5\" opacity=\"0.7\"/>\n          </g>\n        `;\n      }\n    });\n    \n    return petals;\n  }\n\n  private generateFlowerOfLife(colors: any, seededRandom?: () => number): string {\n    const radius = 20;\n    const centers = [\n      { x: 0, y: 0 },\n      { x: radius * Math.cos(0), y: radius * Math.sin(0) },\n      { x: radius * Math.cos(Math.PI / 3), y: radius * Math.sin(Math.PI / 3) },\n      { x: radius * Math.cos(2 * Math.PI / 3), y: radius * Math.sin(2 * Math.PI / 3) },\n      { x: radius * Math.cos(Math.PI), y: radius * Math.sin(Math.PI) },\n      { x: radius * Math.cos(4 * Math.PI / 3), y: radius * Math.sin(4 * Math.PI / 3) },\n      { x: radius * Math.cos(5 * Math.PI / 3), y: radius * Math.sin(5 * Math.PI / 3) }\n    ];\n    \n    let pattern = '<g opacity=\"0.6\">';\n    centers.forEach(center => {\n      pattern += `<circle cx=\"${center.x}\" cy=\"${center.y}\" r=\"${radius}\" fill=\"none\" stroke=\"${colors.dots}\" stroke-width=\"1\"/>`;\n    });\n    pattern += '</g>';\n    \n    return pattern;\n  }\n\n  private generateSeedOfLife(colors: any, seededRandom?: () => number): string {\n    const radius = 12;\n    let pattern = '<g opacity=\"0.4\">';\n    \n    // Central circle\n    pattern += `<circle cx=\"0\" cy=\"0\" r=\"${radius}\" fill=\"none\" stroke=\"${colors.accent}\" stroke-width=\"1\"/>`;\n    \n    // Six surrounding circles\n    for (let i = 0; i < 6; i++) {\n      const angle = (i * Math.PI) / 3;\n      const x = Math.cos(angle) * radius;\n      const y = Math.sin(angle) * radius;\n      pattern += `<circle cx=\"${x}\" cy=\"${y}\" r=\"${radius}\" fill=\"none\" stroke=\"${colors.accent}\" stroke-width=\"1\"/>`;\n    }\n    \n    pattern += '</g>';\n    return pattern;\n  }\n\n  // Seeded random generation for consistent but varied output\n  private createSeedFromInput(prompt: string, brainwaveData?: { attention: number, meditation: number, signalQuality: number }): number {\n    let seedString = prompt.toLowerCase().trim();\n    \n    if (brainwaveData) {\n      seedString += `|${brainwaveData.attention}|${brainwaveData.meditation}|${brainwaveData.signalQuality}`;\n    }\n    \n    // Simple hash function to convert string to number\n    let hash = 0;\n    for (let i = 0; i < seedString.length; i++) {\n      const char = seedString.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    \n    return Math.abs(hash);\n  }\n\n  private createSeededRandom(seed: number): () => number {\n    // Linear Congruential Generator for reproducible randomness\n    let currentSeed = seed % 2147483647;\n    if (currentSeed <= 0) currentSeed += 2147483646;\n\n    return function() {\n      currentSeed = currentSeed * 16807 % 2147483647;\n      return (currentSeed - 1) / 2147483646;\n    };\n  }\n\n  private addColorVariation(colors: any, random: () => number): any {\n    // Create subtle variations to base colors while maintaining harmony\n    const hueShift = (random() - 0.5) * 60; // ±30 degree hue shift\n    const saturationShift = (random() - 0.5) * 0.3; // ±15% saturation shift\n    const lightnessShift = (random() - 0.5) * 0.2; // ±10% lightness shift\n    \n    const variantColors = { ...colors };\n    \n    // Apply subtle variations to gradient colors\n    if (colors.gradient && Array.isArray(colors.gradient)) {\n      variantColors.gradient = colors.gradient.map((color: string) => \n        this.adjustColorHSL(color, hueShift, saturationShift, lightnessShift)\n      );\n    }\n    \n    // Vary accent colors slightly\n    variantColors.accent = this.adjustColorHSL(colors.accent, hueShift * 0.5, saturationShift * 0.5, lightnessShift * 0.3);\n    variantColors.secondary = this.adjustColorHSL(colors.secondary, hueShift * 0.3, saturationShift * 0.3, lightnessShift * 0.2);\n    variantColors.tertiary = this.adjustColorHSL(colors.tertiary, hueShift * 0.4, saturationShift * 0.4, lightnessShift * 0.25);\n    \n    return variantColors;\n  }\n\n  private adjustColorHSL(hexColor: string, hueShift: number, satShift: number, lightShift: number): string {\n    // Simple color adjustment - this is a basic implementation\n    // In a production system, you'd want a more robust HSL conversion\n    \n    // For now, return a slightly modified version of the original color\n    // by adjusting the hex values slightly\n    const hex = hexColor.replace('#', '');\n    let r = parseInt(hex.substr(0, 2), 16);\n    let g = parseInt(hex.substr(2, 2), 16);\n    let b = parseInt(hex.substr(4, 2), 16);\n    \n    // Apply simple RGB adjustments as approximation\n    r = Math.min(255, Math.max(0, Math.round(r + (hueShift * 2))));\n    g = Math.min(255, Math.max(0, Math.round(g + (satShift * 50))));\n    b = Math.min(255, Math.max(0, Math.round(b + (lightShift * 30))));\n    \n    const toHex = (n: number) => n.toString(16).padStart(2, '0');\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n  }\n\n  private getFallbackPrompt(options: MandalaGenerationOptions): string {\n    const { brainwaveData, voiceTranscript, style = 'spiritual', colorPalette = 'vibrant' } = options;\n    \n    // Determine visual style based on content\n    const mandalaStyle = this.determineMandalaStyle(voiceTranscript + ' ' + style);\n    const colorTheme = this.getColorTheme(voiceTranscript, colorPalette);\n    \n    let prompt = `Create an intricate, highly detailed ${mandalaStyle} mandala with ${colorTheme}. `;\n    \n    // Style-specific enhancements\n    if (mandalaStyle === 'dotpainting') {\n      prompt += \"Traditional Aboriginal dot painting style with varying dot sizes, deep contrasts, and authentic indigenous patterns. \";\n    } else if (mandalaStyle === 'geometric') {\n      prompt += \"Precise geometric patterns, sacred mathematical ratios, and complex symmetrical designs with fine line work. \";\n    } else if (mandalaStyle === 'floral') {\n      prompt += \"Ornate botanical elements, layered flower petals, organic curves, and nature-inspired motifs. \";\n    } else if (mandalaStyle === 'sacred') {\n      prompt += \"Sacred geometry including Flower of Life, Seed of Life, and other spiritual symbols with mystical significance. \";\n    }\n    \n    // Brainwave-inspired patterns\n    if (brainwaveData.attention > 70) {\n      prompt += \"Sharp, focused patterns with high contrast, precise details, angular elements, and concentrated energy radiating from center. \";\n    } else if (brainwaveData.attention < 30) {\n      prompt += \"Soft, flowing patterns with gentle transitions, organic curves, and dispersed energy throughout the design. \";\n    }\n    \n    if (brainwaveData.meditation > 70) {\n      prompt += \"Deep meditative qualities with concentric circles, spiral patterns, peaceful symmetry, and serene balance. \";\n    } else if (brainwaveData.meditation < 30) {\n      prompt += \"Dynamic energy patterns with radiating lines, active movement, and vibrant expressions of consciousness. \";\n    }\n    \n    // Voice transcript themes\n    if (voiceTranscript.length > 10) {\n      const themes = this.extractThemes(voiceTranscript);\n      const emotions = this.extractEmotionalContext(voiceTranscript);\n      \n      if (themes.length > 0) {\n        prompt += `Incorporate symbolic representations of ${themes.join(', ')} through meaningful visual metaphors and traditional iconography. `;\n      }\n      \n      if (emotions.length > 0) {\n        prompt += `Express emotional themes of ${emotions.join(', ')} through color harmony, pattern flow, and spiritual symbolism. `;\n      }\n    }\n    \n    // Final enhancement based on examples\n    prompt += \"Multiple intricate layers from outer decorative border to detailed center motif, with professional artistic quality, \" +\n              \"perfect radial symmetry, rich detail density, harmonious color relationships, and spiritual depth that invites contemplation and meditation.\";\n    \n    return prompt;\n  }\n\n  private getColorTheme(transcript: string, colorPalette: string): string {\n    const lowerTranscript = transcript.toLowerCase();\n    \n    // Analyze transcript for color preferences\n    if (lowerTranscript.includes('rainbow') || lowerTranscript.includes('colorful') || lowerTranscript.includes('bright')) {\n      return \"vibrant rainbow gradients with rich, saturated colors transitioning smoothly from deep purples and magentas through blues, teals, greens, yellows, and warm oranges\";\n    }\n    \n    if (lowerTranscript.includes('ocean') || lowerTranscript.includes('water') || lowerTranscript.includes('sea')) {\n      return \"oceanic blues and teals with flowing turquoise, aquamarine, and deep sea blue gradients\";\n    }\n    \n    if (lowerTranscript.includes('sunset') || lowerTranscript.includes('warm') || lowerTranscript.includes('fire')) {\n      return \"warm sunset palette with golden yellows, deep oranges, coral reds, and rich amber tones\";\n    }\n    \n    if (lowerTranscript.includes('forest') || lowerTranscript.includes('nature') || lowerTranscript.includes('green')) {\n      return \"natural forest greens with emerald, sage, jade, and earth tone accents\";\n    }\n    \n    if (lowerTranscript.includes('peace') || lowerTranscript.includes('calm') || lowerTranscript.includes('meditation')) {\n      return \"serene blue and purple gradients with soft lavender, deep indigo, and peaceful sky blues\";\n    }\n    \n    if (lowerTranscript.includes('energy') || lowerTranscript.includes('power') || lowerTranscript.includes('strength')) {\n      return \"energetic warm colors with brilliant oranges, fiery reds, golden yellows, and dynamic contrasts\";\n    }\n    \n    // Default based on colorPalette parameter\n    if (colorPalette === 'vibrant') {\n      return \"rich, vibrant colors with strong contrasts and luminous qualities\";\n    } else if (colorPalette === 'earth') {\n      return \"warm earth tones with browns, ochres, and natural mineral colors\";\n    } else if (colorPalette === 'cool') {\n      return \"cool blues, purples, and teals with soothing gradients\";\n    }\n    \n    return \"harmonious color palette with balanced warm and cool tones\";\n  }\n\n  private extractEmotionalContext(transcript: string): string[] {\n    const lowerTranscript = transcript.toLowerCase();\n    const emotions: string[] = [];\n    \n    const emotionMap = {\n      'joy': ['joy', 'happy', 'celebration', 'euphoria', 'bliss', 'delight', 'elated'],\n      'peace': ['peace', 'calm', 'tranquil', 'serene', 'stillness', 'quiet', 'harmony'],\n      'love': ['love', 'compassion', 'warmth', 'tenderness', 'affection', 'caring'],\n      'gratitude': ['grateful', 'thankful', 'appreciation', 'blessed', 'grace'],\n      'wonder': ['wonder', 'awe', 'amazement', 'mystery', 'magic', 'marvel'],\n      'strength': ['strength', 'power', 'courage', 'resilience', 'determination'],\n      'healing': ['healing', 'restoration', 'renewal', 'recovery', 'wellness'],\n      'wisdom': ['wisdom', 'insight', 'understanding', 'knowledge', 'enlightenment'],\n      'connection': ['connection', 'unity', 'oneness', 'belonging', 'togetherness'],\n      'transformation': ['change', 'growth', 'evolution', 'metamorphosis', 'journey']\n    };\n    \n    for (const [emotion, keywords] of Object.entries(emotionMap)) {\n      if (keywords.some(keyword => lowerTranscript.includes(keyword))) {\n        emotions.push(emotion);\n      }\n    }\n    \n    return emotions.length > 0 ? emotions : ['balance', 'harmony'];\n  }\n\n  private extractThemes(transcript: string): string[] {\n    const lowerTranscript = transcript.toLowerCase();\n    const themes: string[] = [];\n    \n    const themeMap = {\n      'nature': ['nature', 'tree', 'flower', 'water', 'earth', 'sky', 'mountain', 'forest'],\n      'peace': ['peace', 'calm', 'tranquil', 'serene', 'quiet', 'still'],\n      'love': ['love', 'heart', 'compassion', 'kindness', 'care'],\n      'wisdom': ['wisdom', 'knowledge', 'understanding', 'insight', 'truth'],\n      'energy': ['energy', 'power', 'strength', 'force', 'vibration'],\n      'healing': ['healing', 'health', 'wellness', 'recovery', 'balance'],\n      'spirituality': ['spiritual', 'divine', 'sacred', 'holy', 'meditation', 'prayer']\n    };\n    \n    for (const [theme, keywords] of Object.entries(themeMap)) {\n      if (keywords.some(keyword => lowerTranscript.includes(keyword))) {\n        themes.push(theme);\n      }\n    }\n    \n    return themes.length > 0 ? themes : ['harmony', 'balance'];\n  }\n\n  async analyzeSentiment(text: string): Promise<{\n    rating: number;\n    confidence: number;\n    emotions: string[];\n  }> {\n    try {\n      // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a sentiment analysis expert. Analyze the emotional content of text and provide a rating, confidence score, and dominant emotions. Respond with JSON in this format: { 'rating': number (1-5), 'confidence': number (0-1), 'emotions': string[] }\"\n          },\n          {\n            role: \"user\",\n            content: text\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.3\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      \n      return {\n        rating: Math.max(1, Math.min(5, Math.round(result.rating || 3))),\n        confidence: Math.max(0, Math.min(1, result.confidence || 0.5)),\n        emotions: Array.isArray(result.emotions) ? result.emotions : ['neutral']\n      };\n      \n    } catch (error) {\n      console.error('Error analyzing sentiment:', error);\n      return {\n        rating: 3,\n        confidence: 0.5,\n        emotions: ['neutral']\n      };\n    }\n  }\n}\n\nexport const openaiService = new OpenAIService();\n","size_bytes":40596},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/brain-wave-visualization.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Activity } from \"lucide-react\";\nimport { BrainwaveData } from '@shared/schema';\n\ninterface BrainWaveVisualizationProps {\n  data: BrainwaveData | null;\n}\n\nexport function BrainWaveVisualization({ data }: BrainWaveVisualizationProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number>();\n  const dataPointsRef = useRef<number[]>([]);\n\n  // Generate realistic EEG waveform visualization\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const animate = () => {\n      const width = canvas.width;\n      const height = canvas.height;\n      \n      ctx.clearRect(0, 0, width, height);\n      \n      // Generate wave data based on attention and meditation levels\n      const baseFrequency = data ? (data.attention + data.meditation) / 100 : 0.5;\n      const amplitude = data ? (data.signalQuality / 100) * (height / 4) : height / 8;\n      \n      // Add new data point\n      const newPoint = Math.sin(Date.now() * 0.01 * baseFrequency) * amplitude + \n                      Math.sin(Date.now() * 0.02) * (amplitude * 0.3) +\n                      (Math.random() - 0.5) * (amplitude * 0.2);\n      \n      dataPointsRef.current.push(newPoint);\n      \n      // Keep only the last 100 points\n      if (dataPointsRef.current.length > 100) {\n        dataPointsRef.current.shift();\n      }\n      \n      // Draw the waveform\n      ctx.strokeStyle = data ? '#8b5cf6' : '#6b7280'; // primary color if data available\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      \n      const stepX = width / (dataPointsRef.current.length - 1);\n      \n      dataPointsRef.current.forEach((point, index) => {\n        const x = index * stepX;\n        const y = height / 2 + point;\n        \n        if (index === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      });\n      \n      ctx.stroke();\n      \n      // Add gradient overlay\n      const gradient = ctx.createLinearGradient(0, 0, 0, height);\n      gradient.addColorStop(0, 'rgba(139, 92, 246, 0.1)');\n      gradient.addColorStop(1, 'rgba(139, 92, 246, 0.05)');\n      \n      ctx.fillStyle = gradient;\n      ctx.fill();\n      \n      animationRef.current = requestAnimationFrame(animate);\n    };\n    \n    animate();\n    \n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [data]);\n\n  // Resize canvas to match container\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const resizeCanvas = () => {\n      const rect = canvas.getBoundingClientRect();\n      canvas.width = rect.width * window.devicePixelRatio;\n      canvas.height = rect.height * window.devicePixelRatio;\n      \n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n      }\n    };\n\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n    \n    return () => window.removeEventListener('resize', resizeCanvas);\n  }, []);\n\n  return (\n    <Card className=\"glass border-border/50\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n          <Activity className=\"text-primary mr-3 h-5 w-5\" />\n          Brain Activity\n        </h3>\n        \n        <div className=\"space-y-4\">\n          {/* Attention Level */}\n          <div>\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-sm text-muted-foreground\">Attention</span>\n              <span \n                className=\"text-sm font-medium text-primary\" \n                data-testid=\"text-attention-level\"\n              >\n                {data?.attention || 0}%\n              </span>\n            </div>\n            <Progress \n              value={data?.attention || 0} \n              className=\"h-2\"\n              data-testid=\"progress-attention\"\n            />\n          </div>\n\n          {/* Meditation Level */}\n          <div>\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-sm text-muted-foreground\">Meditation</span>\n              <span \n                className=\"text-sm font-medium text-secondary\" \n                data-testid=\"text-meditation-level\"\n              >\n                {data?.meditation || 0}%\n              </span>\n            </div>\n            <Progress \n              value={data?.meditation || 0} \n              className=\"h-2\"\n              data-testid=\"progress-meditation\"\n            />\n          </div>\n\n          {/* Signal Quality */}\n          <div>\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-sm text-muted-foreground\">Signal Quality</span>\n              <span \n                className=\"text-sm font-medium text-accent\" \n                data-testid=\"text-signal-quality\"\n              >\n                {data?.signalQuality || 0}%\n              </span>\n            </div>\n            <Progress \n              value={data?.signalQuality || 0} \n              className=\"h-2\"\n              data-testid=\"progress-signal-quality\"\n            />\n          </div>\n        </div>\n\n        {/* Real-time EEG Wave Visualization */}\n        <div className=\"mt-6\">\n          <div className=\"text-sm text-muted-foreground mb-2\">EEG Waveform</div>\n          <div className=\"h-24 bg-secondary/30 rounded-lg relative overflow-hidden\">\n            <canvas\n              ref={canvasRef}\n              className=\"w-full h-full\"\n              style={{ width: '100%', height: '100%' }}\n              data-testid=\"canvas-eeg-waveform\"\n            />\n            {!data && (\n              <div className=\"absolute inset-0 flex items-center justify-center text-muted-foreground text-sm\">\n                <span data-testid=\"text-no-signal\">No signal</span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Data timestamp */}\n        {data && (\n          <div className=\"mt-2 text-xs text-muted-foreground text-right\">\n            <span data-testid=\"text-last-update\">\n              Last update: {new Date(data.timestamp).toLocaleTimeString()}\n            </span>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6487},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/device-status.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Brain, Mic, Cloud, Plug, Cpu, AlertCircle, CheckCircle, Loader2, Zap, Info, ExternalLink } from \"lucide-react\";\nimport { UseWebSocketReturn } from \"@/hooks/use-websocket\";\nimport { useState, useEffect } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DeviceStatusProps {\n  websocket: UseWebSocketReturn;\n  microphoneEnabled: boolean;\n  onConnectNeuroSky: () => void;\n  onDisconnectNeuroSky: () => void;\n}\n\nexport function DeviceStatus({ \n  websocket, \n  microphoneEnabled, \n  onConnectNeuroSky, \n  onDisconnectNeuroSky \n}: DeviceStatusProps) {\n  const { isConnected, neuroskyConnected, eegData } = websocket;\n  const { toast } = useToast();\n  const [isDemoMode, setIsDemoMode] = useState(false);\n  const [isTogglingDemo, setIsTogglingDemo] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionError, setConnectionError] = useState<string>('');\n  const [connectionHelp, setConnectionHelp] = useState<any>(null);\n  const [showInstructions, setShowInstructions] = useState(false);\n\n  // Signal quality assessment\n  const getSignalQuality = () => {\n    if (!eegData) return { quality: 'No Signal', color: 'bg-gray-500', level: 0 };\n    \n    const signalQuality = eegData.signalQuality;\n    if (signalQuality >= 80) return { quality: 'Excellent', color: 'bg-green-500', level: 5 };\n    if (signalQuality >= 60) return { quality: 'Good', color: 'bg-green-400', level: 4 };\n    if (signalQuality >= 40) return { quality: 'Fair', color: 'bg-yellow-500', level: 3 };\n    if (signalQuality >= 20) return { quality: 'Poor', color: 'bg-orange-500', level: 2 };\n    return { quality: 'Very Poor', color: 'bg-red-500', level: 1 };\n  };\n\n  // Check ThinkGear Connector availability\n  const checkThinkGearConnector = async () => {\n    try {\n      const response = await fetch('/api/neurosky/check');\n      const data = await response.json();\n      \n      if (!data.available) {\n        setConnectionError(data.message);\n        setConnectionHelp(data);\n        setShowInstructions(true);\n        return false;\n      }\n      return true;\n    } catch (error) {\n      setConnectionError('Failed to check ThinkGear Connector status');\n      return false;\n    }\n  };\n\n  // Enhanced connection handlers\n  const handleConnect = async () => {\n    setIsConnecting(true);\n    setConnectionError('');\n    setConnectionHelp(null);\n    \n    // Check ThinkGear Connector first\n    const isAvailable = await checkThinkGearConnector();\n    if (!isAvailable) {\n      setIsConnecting(false);\n      return;\n    }\n    \n    try {\n      const response = await fetch('/api/neurosky/connect', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      const data = await response.json();\n      \n      if (!data.success) {\n        setConnectionError(data.error);\n        if (data.needsSetup) {\n          setConnectionHelp({ troubleshooting: data.troubleshooting });\n          setShowInstructions(true);\n        }\n      } else {\n        toast({\n          title: \"Connected!\",\n          description: data.message,\n        });\n      }\n    } catch (error) {\n      setConnectionError('Failed to connect. Please try again.');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const handleDisconnect = async () => {\n    try {\n      setConnectionError('');\n      setConnectionHelp(null);\n      \n      const response = await fetch('/api/neurosky/disconnect', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        toast({\n          title: \"Disconnected\",\n          description: data.message,\n        });\n      }\n    } catch (error) {\n      console.error('Disconnect error:', error);\n    }\n    \n    onDisconnectNeuroSky();\n  };\n\n  // Watch connection state changes\n  useEffect(() => {\n    if (neuroskyConnected) {\n      setIsConnecting(false);\n      setConnectionError('');\n    } else if (isConnecting) {\n      // Keep isConnecting true while attempting\n    }\n  }, [neuroskyConnected, isConnecting]);\n\n  const handleDemoModeToggle = async (enabled: boolean) => {\n    setIsTogglingDemo(true);\n    try {\n      const endpoint = enabled ? '/api/neurosky/demo/enable' : '/api/neurosky/demo/disable';\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        setIsDemoMode(enabled);\n        setConnectionError('');\n        setConnectionHelp(null);\n        \n        toast({\n          title: enabled ? \"Demo Mode Enabled\" : \"Demo Mode Disabled\",\n          description: data.message,\n        });\n        \n        // Show demo info if enabled\n        if (enabled && data.demoInfo) {\n          setConnectionHelp({ demoInfo: data.demoInfo });\n        }\n      } else {\n        throw new Error(data.error);\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `Failed to ${enabled ? 'enable' : 'disable'} demo mode`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsTogglingDemo(false);\n    }\n  };\n\n  return (\n    <Card className=\"glass border-border/50\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold flex items-center\">\n            <Plug className=\"text-primary mr-3 h-5 w-5\" />\n            Device Status\n          </h3>\n          \n          {neuroskyConnected ? (\n            <Button \n              onClick={handleDisconnect}\n              variant=\"outline\" \n              size=\"sm\"\n              className=\"touch-manipulation min-h-[36px]\"\n              data-testid=\"button-disconnect-neurosky\"\n            >\n              Disconnect\n            </Button>\n          ) : (\n            <Button \n              onClick={handleConnect}\n              variant=\"default\" \n              size=\"sm\"\n              className=\"touch-manipulation min-h-[36px]\"\n              disabled={isConnecting}\n              data-testid=\"button-connect-neurosky\"\n            >\n              {isConnecting ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Connecting...\n                </>\n              ) : (\n                'Connect'\n              )}\n            </Button>\n          )}\n        </div>\n        \n        <div className=\"space-y-4\">\n          {/* Demo Mode Toggle */}\n          <div className=\"flex items-center justify-between p-3 bg-primary/10 rounded-lg border border-primary/20\">\n            <div className=\"flex items-center space-x-3\">\n              <Cpu className=\"text-primary h-5 w-5\" />\n              <div>\n                <span className=\"font-medium\">Demo Mode</span>\n                <p className=\"text-xs text-muted-foreground\">Simulate brain waves for testing</p>\n              </div>\n            </div>\n            <Switch\n              checked={isDemoMode}\n              onCheckedChange={handleDemoModeToggle}\n              disabled={isTogglingDemo}\n              data-testid=\"switch-demo-mode\"\n            />\n          </div>\n\n          {/* NeuroSky Connection */}\n          <div className=\"p-3 bg-secondary/30 rounded-lg space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <Brain className=\"text-primary h-5 w-5\" />\n                <span data-testid=\"text-neurosky-label\">\n                  {isDemoMode ? 'Simulated Brain Waves' : 'NeuroSky Headset'}\n                </span>\n              </div>\n              <Badge \n                variant={neuroskyConnected ? \"default\" : isConnecting ? \"secondary\" : \"destructive\"}\n                data-testid=\"badge-neurosky-status\"\n              >\n                <div className={`w-2 h-2 rounded-full mr-2 ${\n                  neuroskyConnected ? 'bg-green-500' : \n                  isConnecting ? 'bg-yellow-500' :\n                  'bg-red-500'\n                }`} />\n                {neuroskyConnected ? (isDemoMode ? 'Simulating' : 'Connected') : \n                 isConnecting ? 'Connecting...' : 'Disconnected'}\n              </Badge>\n            </div>\n\n            {/* Signal Quality Indicator */}\n            {neuroskyConnected && eegData && (\n              <div className=\"flex items-center space-x-2 text-xs\">\n                <Zap className=\"w-3 h-3 text-muted-foreground\" />\n                <span className=\"text-muted-foreground\">Signal Quality:</span>\n                <div className=\"flex items-center space-x-1\">\n                  <div className={`w-2 h-2 rounded-full ${getSignalQuality().color}`} />\n                  <span className=\"font-medium\">{getSignalQuality().quality}</span>\n                  <span className=\"text-muted-foreground\">({eegData.signalQuality}%)</span>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Connection Error */}\n          {connectionError && (\n            <Alert className=\"border-destructive/50 bg-destructive/10\">\n              <AlertCircle className=\"h-4 w-4 text-destructive\" />\n              <AlertTitle>Connection Error</AlertTitle>\n              <AlertDescription>{connectionError}</AlertDescription>\n            </Alert>\n          )}\n          \n          {/* Setup Instructions */}\n          {connectionHelp && showInstructions && (\n            <Alert className=\"border-blue-200 bg-blue-50\">\n              <Info className=\"h-4 w-4 text-blue-600\" />\n              <AlertTitle className=\"text-blue-800\">ThinkGear Connector Setup Required</AlertTitle>\n              <AlertDescription>\n                <div className=\"space-y-3 mt-2 text-blue-700\">\n                  <p>Follow these steps to connect your NeuroSky device:</p>\n                  \n                  {connectionHelp.instructions && (\n                    <div className=\"space-y-3\">\n                      <div className=\"bg-white p-3 rounded border\">\n                        <h4 className=\"font-medium mb-2 flex items-center\">🖥️ Windows Instructions:</h4>\n                        <ol className=\"list-decimal list-inside text-sm space-y-1 text-gray-700\">\n                          {connectionHelp.instructions.windows.map((step: string, index: number) => (\n                            <li key={index}>{step}</li>\n                          ))}\n                        </ol>\n                      </div>\n                      \n                      <div className=\"bg-white p-3 rounded border\">\n                        <h4 className=\"font-medium mb-2 flex items-center\">🍎 macOS Instructions:</h4>\n                        <ol className=\"list-decimal list-inside text-sm space-y-1 text-gray-700\">\n                          {connectionHelp.instructions.mac.map((step: string, index: number) => (\n                            <li key={index}>{step}</li>\n                          ))}\n                        </ol>\n                      </div>\n                      \n                      <div className=\"bg-white p-3 rounded border\">\n                        <h4 className=\"font-medium mb-2 flex items-center\">🔧 Troubleshooting:</h4>\n                        <ul className=\"list-disc list-inside text-sm space-y-1 text-gray-700\">\n                          {connectionHelp.instructions.troubleshooting.map((tip: string, index: number) => (\n                            <li key={index}>{tip}</li>\n                          ))}\n                        </ul>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {connectionHelp.troubleshooting && (\n                    <div className=\"bg-white p-3 rounded border\">\n                      <h4 className=\"font-medium mb-2 flex items-center\">💡 Quick Fixes:</h4>\n                      <ul className=\"list-disc list-inside text-sm space-y-1 text-gray-700\">\n                        {connectionHelp.troubleshooting.map((tip: string, index: number) => (\n                          <li key={index}>{tip}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex gap-2 mt-3\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={() => setShowInstructions(false)}\n                    >\n                      Hide Instructions\n                    </Button>\n                    <Button \n                      size=\"sm\" \n                      onClick={handleConnect}\n                      disabled={isConnecting}\n                    >\n                      {isConnecting ? 'Connecting...' : 'Try Again'}\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={() => window.open('https://developer.neurosky.com/docs/doku.php?id=thinkgear_connector_tgc', '_blank')}\n                    >\n                      <ExternalLink className=\"w-3 h-3 mr-1\" />\n                      Download TGC\n                    </Button>\n                  </div>\n                </div>\n              </AlertDescription>\n            </Alert>\n          )}\n          \n          {/* Demo Mode Info */}\n          {connectionHelp?.demoInfo && (\n            <Alert className=\"border-green-200 bg-green-50\">\n              <Info className=\"h-4 w-4 text-green-600\" />\n              <AlertTitle className=\"text-green-800\">Demo Mode Active</AlertTitle>\n              <AlertDescription>\n                <div className=\"space-y-2 mt-2 text-green-700\">\n                  <p>{connectionHelp.demoInfo.description}</p>\n                  <div className=\"bg-white p-2 rounded border\">\n                    <h4 className=\"font-medium mb-1\">Simulation Phases:</h4>\n                    <ol className=\"list-decimal list-inside text-sm space-y-1 text-gray-700\">\n                      {connectionHelp.demoInfo.phases.map((phase: string, index: number) => (\n                        <li key={index}>{phase}</li>\n                      ))}\n                    </ol>\n                  </div>\n                  <p className=\"text-sm text-green-600\">{connectionHelp.demoInfo.note}</p>\n                </div>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Connection Tips for Disconnected State */}\n          {!neuroskyConnected && !isConnecting && !connectionError && !isDemoMode && (\n            <Alert className=\"border-blue-200 bg-blue-50\">\n              <CheckCircle className=\"h-4 w-4 text-blue-600\" />\n              <AlertTitle className=\"text-blue-800\">Ready to Connect</AlertTitle>\n              <AlertDescription className=\"text-blue-700\">\n                <div className=\"space-y-2\">\n                  <p>Before connecting, ensure:</p>\n                  <ul className=\"list-disc list-inside text-sm space-y-1 ml-4\">\n                    <li>ThinkGear Connector is running on your computer</li>\n                    <li>Your NeuroSky headset is powered on (LED blinking blue)</li>\n                    <li>The headset is connected in ThinkGear Connector</li>\n                    <li>No other applications are using the device</li>\n                  </ul>\n                  <div className=\"mt-2\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={async () => {\n                        const isAvailable = await checkThinkGearConnector();\n                        if (!isAvailable) {\n                          setShowInstructions(true);\n                        } else {\n                          toast({\n                            title: \"ThinkGear Connector Ready\",\n                            description: \"Your connector is running and ready for connection!\",\n                          });\n                        }\n                      }}\n                    >\n                      Check Setup\n                    </Button>\n                  </div>\n                </div>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* WebSocket Connection */}\n          <div className=\"flex items-center justify-between p-3 bg-secondary/30 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <Cloud className=\"text-secondary h-5 w-5\" />\n              <span data-testid=\"text-websocket-label\">WebSocket</span>\n            </div>\n            <Badge \n              variant={isConnected ? \"default\" : \"destructive\"}\n              data-testid=\"badge-websocket-status\"\n            >\n              <div className={`w-2 h-2 rounded-full mr-2 ${\n                isConnected ? 'bg-green-500' : 'bg-red-500'\n              }`} />\n              {isConnected ? 'Connected' : 'Disconnected'}\n            </Badge>\n          </div>\n\n          {/* Mic Status */}\n          <div className=\"flex items-center justify-between p-3 bg-secondary/30 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <Mic className=\"text-accent h-5 w-5\" />\n              <span data-testid=\"text-microphone-label\">Mic</span>\n            </div>\n            <Badge \n              variant={microphoneEnabled ? \"default\" : \"secondary\"}\n              data-testid=\"badge-microphone-status\"\n            >\n              <div className={`w-2 h-2 rounded-full mr-2 ${\n                microphoneEnabled ? 'bg-green-500' : 'bg-yellow-500'\n              }`} />\n              {microphoneEnabled ? 'Ready' : 'Permission Needed'}\n            </Badge>\n          </div>\n\n          {/* API Services */}\n          <div className=\"flex items-center justify-between p-3 bg-secondary/30 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <Cloud className=\"text-primary h-5 w-5\" />\n              <span data-testid=\"text-api-label\">AI Services</span>\n            </div>\n            <Badge variant=\"default\" data-testid=\"badge-api-status\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\" />\n              Ready\n            </Badge>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":18544},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/mandala-display.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download, Share2, Palette } from \"lucide-react\";\nimport QRCode from 'qrcode';\n\ninterface GeneratedMandala {\n  id?: string;\n  imageUrl: string;\n  prompt: string;\n  revisedPrompt?: string;\n  generationTime?: number;\n}\n\ninterface MandalaDisplayProps {\n  mandala: GeneratedMandala | null;\n  isGenerating: boolean;\n  generationStatus: 'idle' | 'generating' | 'completed' | 'error';\n  error?: string;\n}\n\nexport function MandalaDisplay({ mandala, isGenerating, generationStatus, error }: MandalaDisplayProps) {\n  const [qrCodeUrl, setQrCodeUrl] = useState<string>('');\n\n  // Generate QR code when mandala is available\n  useEffect(() => {\n    if (mandala?.id) {\n      // Create shareable URL for the mandala\n      const baseUrl = window.location.origin;\n      const shareableUrl = `${baseUrl}/api/mandalas/${mandala.id}/image`;\n      \n      QRCode.toDataURL(shareableUrl, {\n        width: 200,\n        margin: 2,\n        color: {\n          dark: '#000000',\n          light: '#FFFFFF'\n        }\n      }).then((url: string) => {\n        setQrCodeUrl(url);\n      }).catch((err: any) => {\n        console.error('Error generating QR code:', err);\n      });\n    } else {\n      setQrCodeUrl('');\n    }\n  }, [mandala?.id]);\n\n  const handleDownload = async () => {\n    if (!mandala?.id) return;\n\n    try {\n      // Use shareable route for consistent behavior and proper headers\n      const baseUrl = window.location.origin;\n      const shareableUrl = `${baseUrl}/api/mandalas/${mandala.id}/image`;\n      \n      const response = await fetch(shareableUrl);\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `mandala-${Date.now()}.png`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Error downloading image:', error);\n    }\n  };\n\n  const handleShare = async () => {\n    if (!mandala?.id) return;\n\n    // Create shareable URL for the mandala\n    const baseUrl = window.location.origin;\n    const shareableUrl = `${baseUrl}/api/mandalas/${mandala.id}/image`;\n\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: 'My Mind Mandala',\n          text: 'Check out this mandala created from my brain waves and thoughts!',\n          url: shareableUrl\n        });\n      } catch (error) {\n        console.error('Error sharing:', error);\n        // Fallback to clipboard\n        navigator.clipboard.writeText(shareableUrl);\n      }\n    } else {\n      // Fallback for browsers without native share\n      navigator.clipboard.writeText(shareableUrl);\n    }\n  };\n\n  return (\n    <Card className=\"glass border-border/50 mandala-container\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n          <Palette className=\"text-accent mr-3 h-5 w-5\" />\n          Generated Mandala\n        </h3>\n        \n        {/* Mandala Image Container */}\n        <div className=\"aspect-square bg-secondary/30 rounded-lg flex items-center justify-center mb-6 overflow-hidden relative\">\n          {isGenerating ? (\n            <div className=\"flex flex-col items-center space-y-4\" data-testid=\"div-generating\">\n              <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin\" />\n              <p className=\"text-muted-foreground\">Creating your mandala...</p>\n            </div>\n          ) : mandala?.imageUrl ? (\n            <img \n              src={mandala.imageUrl}\n              alt=\"Generated mandala based on brain waves and voice input\" \n              className=\"w-full h-full object-cover rounded-lg\"\n              data-testid=\"img-generated-mandala\"\n            />\n          ) : error ? (\n            <div className=\"text-center p-8\" data-testid=\"div-error-state\">\n              <div className=\"text-destructive mb-2\">⚠️</div>\n              <p className=\"text-muted-foreground text-sm\">{error}</p>\n            </div>\n          ) : (\n            <div className=\"text-center p-8\" data-testid=\"div-empty-state\">\n              <div className=\"text-6xl mb-4\">🎨</div>\n              <p className=\"text-muted-foreground\">Your mandala will appear here</p>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Start recording your voice to generate your first mandala\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Generation Status */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-2\">\n            <div className={`w-3 h-3 rounded-full ${\n              generationStatus === 'completed' ? 'bg-green-500' :\n              generationStatus === 'generating' ? 'bg-yellow-500 animate-pulse' :\n              generationStatus === 'error' ? 'bg-red-500' :\n              'bg-gray-500'\n            }`} />\n            <span className=\"text-sm text-muted-foreground\" data-testid=\"text-generation-status\">\n              {generationStatus === 'completed' ? 'Generation completed' :\n               generationStatus === 'generating' ? 'Generating...' :\n               generationStatus === 'error' ? 'Generation failed' :\n               'Ready to generate'}\n            </span>\n          </div>\n          {mandala && (\n            <span className=\"text-xs text-muted-foreground\" data-testid=\"text-generation-time\">\n              {mandala.generationTime ? `${mandala.generationTime}s` : ''}\n            </span>\n          )}\n        </div>\n\n        {/* AI Prompt Used */}\n        {mandala?.prompt && (\n          <div className=\"bg-secondary/30 rounded-lg p-4 mb-6\">\n            <div className=\"text-sm text-muted-foreground mb-2\">AI Prompt Generated:</div>\n            <div className=\"text-sm text-foreground line-clamp-4\" data-testid=\"text-generated-prompt\">\n              {mandala.revisedPrompt || mandala.prompt}\n            </div>\n          </div>\n        )}\n\n        {/* Download Options */}\n        {mandala && (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n            {/* QR Code */}\n            <div className=\"bg-secondary/30 rounded-lg p-4 text-center order-2 sm:order-1\">\n              <div className=\"w-20 h-20 sm:w-24 sm:h-24 mx-auto mb-3 bg-white rounded-lg flex items-center justify-center\">\n                {qrCodeUrl ? (\n                  <img \n                    src={qrCodeUrl} \n                    alt=\"QR code for mandala download\" \n                    className=\"w-full h-full rounded-lg\"\n                    data-testid=\"img-qr-code\"\n                  />\n                ) : (\n                  <div className=\"text-gray-400\" data-testid=\"div-qr-loading\">\n                    Loading...\n                  </div>\n                )}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Scan to download</p>\n            </div>\n\n            {/* Direct Actions */}\n            <div className=\"space-y-2 order-1 sm:order-2\">\n              <Button \n                onClick={handleDownload}\n                className=\"w-full bg-accent hover:bg-accent/80 text-accent-foreground touch-manipulation min-h-[44px]\"\n                data-testid=\"button-download-mandala\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Download\n              </Button>\n              <Button \n                onClick={handleShare}\n                variant=\"outline\"\n                className=\"w-full touch-manipulation min-h-[44px]\"\n                data-testid=\"button-share-mandala\"\n              >\n                <Share2 className=\"w-4 h-4 mr-2\" />\n                Share\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Generation Statistics */}\n        {mandala && (\n          <div className=\"mt-4 grid grid-cols-2 gap-4 text-center\">\n            <div className=\"bg-primary/10 rounded-lg p-3\">\n              <div className=\"text-lg font-semibold text-primary\" data-testid=\"text-total-generations\">\n                1\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Generated Today</div>\n            </div>\n            <div className=\"bg-secondary/10 rounded-lg p-3\">\n              <div className=\"text-lg font-semibold text-secondary\" data-testid=\"text-session-time\">\n                {new Date().toLocaleTimeString()}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Session Time</div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8818},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/voice-input.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Mic, MicOff, Square, Edit3 } from \"lucide-react\";\nimport { useSpeechRecognition } from \"@/hooks/use-speech-recognition\";\n\ninterface VoiceInputProps {\n  onTranscriptChange: (transcript: string) => void;\n  onGenerateMandala: (transcript: string) => void;\n  isGenerating: boolean;\n  resetTrigger?: number; // Increment to trigger reset\n}\n\nexport function VoiceInput({ onTranscriptChange, onGenerateMandala, isGenerating, resetTrigger }: VoiceInputProps) {\n  const {\n    isListening,\n    transcript,\n    startListening,\n    stopListening,\n    resetTranscript,\n    isSupported,\n    error\n  } = useSpeechRecognition();\n\n  const [hasStartedRecording, setHasStartedRecording] = useState(false);\n  const [manualText, setManualText] = useState('');\n  const [isManualMode, setIsManualMode] = useState(false);\n\n  // Effective transcript combines speech recognition and manual text\n  const effectiveTranscript = isManualMode ? manualText : transcript;\n\n  // Update parent component when transcript changes\n  useEffect(() => {\n    onTranscriptChange(effectiveTranscript);\n  }, [effectiveTranscript, onTranscriptChange]);\n\n  // Handle external reset trigger\n  useEffect(() => {\n    if (resetTrigger && resetTrigger > 0) {\n      // Stop listening if currently active\n      if (isListening) {\n        stopListening();\n      }\n      // Clear all transcript data\n      resetTranscript();\n      setManualText('');\n      setHasStartedRecording(false);\n      setIsManualMode(false);\n    }\n  }, [resetTrigger, isListening, stopListening, resetTranscript]);\n\n  const handleToggleRecording = () => {\n    if (isListening) {\n      stopListening();\n    } else {\n      if (!hasStartedRecording) {\n        setHasStartedRecording(true);\n        resetTranscript();\n      }\n      startListening();\n    }\n  };\n\n  const handleGenerateMandala = () => {\n    if (effectiveTranscript.trim()) {\n      onGenerateMandala(effectiveTranscript.trim());\n      onTranscriptChange(effectiveTranscript.trim());\n    }\n  };\n\n  const handleClearTranscript = () => {\n    resetTranscript();\n    setManualText('');\n    onTranscriptChange('');\n    setHasStartedRecording(false);\n    setIsManualMode(false);\n  };\n\n  const handleManualTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setManualText(e.target.value);\n    setIsManualMode(true);\n  };\n\n  const toggleManualMode = () => {\n    setIsManualMode(!isManualMode);\n    if (!isManualMode) {\n      setManualText(transcript || '');\n    } else {\n      resetTranscript();\n    }\n  };\n\n  if (!isSupported) {\n    return (\n      <Card className=\"glass border-border/50\">\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n            <MicOff className=\"text-destructive mr-3 h-5 w-5\" />\n            Voice Input\n          </h3>\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\" data-testid=\"text-unsupported-browser\">\n              Speech recognition is not supported in your browser. Please use Chrome, Edge, or Safari.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"glass border-border/50\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n          <Mic className=\"text-secondary mr-3 h-5 w-5\" />\n          Voice Input\n        </h3>\n        \n        <div className=\"space-y-4\">\n          {/* Recording Button */}\n          <div className=\"text-center\">\n            <Button\n              onClick={handleToggleRecording}\n              disabled={isGenerating}\n              className={`w-16 h-16 sm:w-20 sm:h-20 rounded-full mx-auto mb-3 sm:mb-4 transition-all duration-200 touch-manipulation ${\n                isListening \n                  ? 'bg-destructive hover:bg-destructive/80 animate-pulse' \n                  : 'bg-gradient-to-r from-secondary to-accent hover:scale-105 active:scale-95'\n              }`}\n              data-testid=\"button-toggle-recording\"\n            >\n              {isListening ? (\n                <Square className=\"h-6 w-6 sm:h-8 sm:w-8 text-primary-foreground\" />\n              ) : (\n                <Mic className=\"h-6 w-6 sm:h-8 sm:w-8 text-primary-foreground\" />\n              )}\n            </Button>\n            <p className=\"text-sm text-muted-foreground px-4\" data-testid=\"text-recording-instruction\">\n              {isListening ? 'Tap to stop recording' : 'Tap to start speaking'}\n            </p>\n          </div>\n\n          {/* Voice Transcript / Manual Input */}\n          <div className=\"bg-secondary/30 rounded-lg p-4 min-h-[120px] relative\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"text-sm text-muted-foreground\">\n                {isManualMode ? 'Texto Manual:' : 'Transcript:'}\n              </div>\n              <Button\n                onClick={toggleManualMode}\n                size=\"sm\"\n                variant=\"ghost\"\n                className=\"h-6 px-2 text-xs\"\n                data-testid=\"button-toggle-manual-mode\"\n              >\n                <Edit3 className=\"w-3 h-3 mr-1\" />\n                {isManualMode ? 'Voz' : 'Texto'}\n              </Button>\n            </div>\n            \n            {isManualMode ? (\n              <textarea\n                value={manualText}\n                onChange={handleManualTextChange}\n                className=\"w-full min-h-[60px] bg-transparent border-none outline-none resize-none text-foreground\"\n                placeholder=\"Digite seus pensamentos, sentimentos ou intenções...\"\n                data-testid=\"textarea-manual-input\"\n              />\n            ) : (\n              <div \n                className=\"text-foreground min-h-[60px] whitespace-pre-wrap\"\n                data-testid=\"text-transcript\"\n              >\n                {transcript || (hasStartedRecording ? 'Listening...' : 'Click the microphone to start speaking')}\n              </div>\n            )}\n            \n            {isListening && !isManualMode && (\n              <div className=\"flex items-center mt-3 space-x-2\">\n                <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" />\n                <span className=\"text-xs text-muted-foreground\" data-testid=\"text-listening-indicator\">\n                  Listening...\n                </span>\n              </div>\n            )}\n\n            {error && !isManualMode && (\n              <div className=\"mt-2 text-sm text-destructive\" data-testid=\"text-speech-error\">\n                {error}\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  Clique no botão \"Texto\" acima para inserir texto manualmente\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-3\">\n            <Button\n              onClick={handleGenerateMandala}\n              disabled={!effectiveTranscript.trim() || isGenerating || (isListening && !isManualMode)}\n              className=\"flex-1 bg-gradient-to-r from-primary to-secondary hover:from-primary/80 hover:to-secondary/80 touch-manipulation min-h-[44px]\"\n              data-testid=\"button-generate-mandala\"\n            >\n              {isGenerating ? (\n                <>\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                  Generating...\n                </>\n              ) : (\n                <>\n                  <div className=\"w-4 h-4 mr-2\">✨</div>\n                  Generate Mandala\n                </>\n              )}\n            </Button>\n\n            {effectiveTranscript && (\n              <Button\n                onClick={handleClearTranscript}\n                disabled={isGenerating || (isListening && !isManualMode)}\n                variant=\"outline\"\n                className=\"w-full sm:w-auto touch-manipulation min-h-[44px]\"\n                data-testid=\"button-clear-transcript\"\n              >\n                Clear\n              </Button>\n            )}\n          </div>\n\n          {/* Tips */}\n          {!hasStartedRecording && (\n            <div className=\"bg-primary/10 border border-primary/20 rounded-lg p-3\">\n              <p className=\"text-xs text-muted-foreground\" data-testid=\"text-voice-tips\">\n                💡 <strong>Tips:</strong> Speak about your feelings, thoughts, or intentions. \n                The AI will combine your words with your brain waves to create a unique mandala.\n              </p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8789},"SCCP1910/fecart-15-09/MandalaMind/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"SCCP1910/fecart-15-09/MandalaMind/client/src/hooks/use-speech-recognition.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from 'react';\n\ninterface SpeechRecognitionEvent extends Event {\n  results: SpeechRecognitionResultList;\n  resultIndex: number;\n}\n\ninterface SpeechRecognitionErrorEvent extends Event {\n  error: string;\n}\n\nexport interface UseSpeechRecognitionReturn {\n  isListening: boolean;\n  transcript: string;\n  startListening: () => void;\n  stopListening: () => void;\n  resetTranscript: () => void;\n  isSupported: boolean;\n  error: string | null;\n}\n\nexport function useSpeechRecognition(): UseSpeechRecognitionReturn {\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const recognitionRef = useRef<any>(null);\n\n  // Check if speech recognition is supported\n  const isSupported = typeof window !== 'undefined' && \n    ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window);\n\n  useEffect(() => {\n    if (!isSupported) {\n      setError('Speech recognition is not supported in this browser');\n      return;\n    }\n\n    // Initialize speech recognition\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'pt-BR';\n\n    recognition.onstart = () => {\n      setIsListening(true);\n      setError(null);\n    };\n\n    recognition.onresult = (event: SpeechRecognitionEvent) => {\n      let finalTranscript = '';\n      let interimTranscript = '';\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          finalTranscript += transcript;\n        } else {\n          interimTranscript += transcript;\n        }\n      }\n\n      setTranscript(prev => {\n        const newTranscript = prev + finalTranscript;\n        return newTranscript;\n      });\n    };\n\n    recognition.onerror = (event: SpeechRecognitionErrorEvent) => {\n      setError(`Speech recognition error: ${event.error}`);\n      setIsListening(false);\n    };\n\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n\n    recognitionRef.current = recognition;\n\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, [isSupported]);\n\n  const startListening = useCallback(() => {\n    if (!isSupported) {\n      setError('Speech recognition is not supported');\n      return;\n    }\n\n    if (recognitionRef.current && !isListening) {\n      try {\n        recognitionRef.current.start();\n      } catch (error) {\n        setError('Failed to start speech recognition');\n        console.error('Speech recognition start error:', error);\n      }\n    }\n  }, [isListening, isSupported]);\n\n  const stopListening = useCallback(() => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop();\n    }\n  }, [isListening]);\n\n  const resetTranscript = useCallback(() => {\n    setTranscript('');\n    setError(null);\n  }, []);\n\n  return {\n    isListening,\n    transcript,\n    startListening,\n    stopListening,\n    resetTranscript,\n    isSupported,\n    error\n  };\n}\n\n// Extend the Window interface to include speech recognition\ndeclare global {\n  interface Window {\n    SpeechRecognition: any;\n    webkitSpeechRecognition: any;\n  }\n}\n","size_bytes":3428},"SCCP1910/fecart-15-09/MandalaMind/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"SCCP1910/fecart-15-09/MandalaMind/client/src/hooks/use-websocket.tsx":{"content":"import { useEffect, useRef, useState, useCallback } from 'react';\nimport { BrainwaveData } from '@shared/schema';\n\nexport interface WebSocketMessage {\n  type: string;\n  data?: any;\n  error?: string;\n  message?: string;\n}\n\nexport interface UseWebSocketReturn {\n  isConnected: boolean;\n  sendMessage: (message: any) => void;\n  lastMessage: WebSocketMessage | null;\n  eegData: BrainwaveData | null;\n  neuroskyConnected: boolean;\n  connectNeuroSky: () => void;\n  disconnectNeuroSky: () => void;\n}\n\nexport function useWebSocket(): UseWebSocketReturn {\n  const ws = useRef<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const [eegData, setEegData] = useState<BrainwaveData | null>(null);\n  const [neuroskyConnected, setNeuroskyConnected] = useState(false);\n\n  const connect = useCallback(() => {\n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      ws.current = new WebSocket(wsUrl);\n\n      ws.current.onopen = () => {\n        console.log('WebSocket connected');\n        setIsConnected(true);\n      };\n\n      ws.current.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          setLastMessage(message);\n\n          switch (message.type) {\n            case 'eeg_data':\n              if (message.data) {\n                setEegData(message.data);\n              }\n              break;\n            case 'neurosky_connected':\n              setNeuroskyConnected(true);\n              break;\n            case 'neurosky_disconnected':\n              setNeuroskyConnected(false);\n              break;\n            case 'connection_status':\n              setNeuroskyConnected(message.data?.connected || false);\n              if (message.data?.currentData) {\n                setEegData(message.data.currentData);\n              }\n              break;\n            case 'neurosky_error':\n              console.error('NeuroSky error:', message.error);\n              break;\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      ws.current.onclose = () => {\n        console.log('WebSocket disconnected');\n        setIsConnected(false);\n        setNeuroskyConnected(false);\n        \n        // Attempt to reconnect after 3 seconds\n        setTimeout(() => {\n          if (!ws.current || ws.current.readyState === WebSocket.CLOSED) {\n            connect();\n          }\n        }, 3000);\n      };\n\n      ws.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n\n    } catch (error) {\n      console.error('Failed to connect WebSocket:', error);\n    }\n  }, []);\n\n  const sendMessage = useCallback((message: any) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  }, []);\n\n  const connectNeuroSky = useCallback(() => {\n    sendMessage({ type: 'connect_neurosky' });\n  }, [sendMessage]);\n\n  const disconnectNeuroSky = useCallback(() => {\n    sendMessage({ type: 'disconnect_neurosky' });\n  }, [sendMessage]);\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, [connect]);\n\n  return {\n    isConnected,\n    sendMessage,\n    lastMessage,\n    eegData,\n    neuroskyConnected,\n    connectNeuroSky,\n    disconnectNeuroSky\n  };\n}\n","size_bytes":3606},"SCCP1910/fecart-15-09/MandalaMind/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"SCCP1910/fecart-15-09/MandalaMind/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"SCCP1910/fecart-15-09/MandalaMind/client/src/pages/home.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { DeviceStatus } from '@/components/device-status';\nimport { BrainWaveVisualization } from '@/components/brain-wave-visualization';\nimport { VoiceInput } from '@/components/voice-input';\nimport { MandalaDisplay } from '@/components/mandala-display';\nimport { useWebSocket } from '@/hooks/use-websocket';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { RotateCcw } from 'lucide-react';\nimport type { Mandala, Session, BrainwaveData } from '@shared/schema';\n\ninterface GenerateMandalaResponse {\n  mandala: Mandala;\n  generatedPrompt: string;\n  imageUrl: string;\n  revisedPrompt?: string;\n}\n\nexport default function Home() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const websocket = useWebSocket();\n  const [currentSession, setCurrentSession] = useState<Session | null>(null);\n  const [currentTranscript, setCurrentTranscript] = useState('');\n  const [generatedMandala, setGeneratedMandala] = useState<any>(null);\n  const [generationStatus, setGenerationStatus] = useState<'idle' | 'generating' | 'completed' | 'error'>('idle');\n  const [generationError, setGenerationError] = useState<string>('');\n  const [resetTrigger, setResetTrigger] = useState(0);\n\n  // Create session on component mount\n  useEffect(() => {\n    const createSession = async () => {\n      try {\n        const response = await apiRequest('POST', '/api/sessions', {\n          attentionLevel: 0,\n          meditationLevel: 0,\n          signalQuality: 0\n        });\n        const session = await response.json();\n        setCurrentSession(session);\n      } catch (error) {\n        console.error('Failed to create session:', error);\n        toast({\n          title: \"Session Error\",\n          description: \"Failed to create session. Please refresh the page.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    createSession();\n  }, [toast]);\n\n  // Fetch recent mandalas\n  const { data: recentMandalas } = useQuery<Mandala[]>({\n    queryKey: ['/api/mandalas/recent'],\n    enabled: true\n  });\n\n  // Generate mandala mutation\n  const generateMandalaMutation = useMutation({\n    mutationFn: async (data: {\n      voiceTranscript: string;\n      brainwaveData: BrainwaveData;\n      sessionId: string;\n    }) => {\n      const response = await apiRequest('POST', '/api/mandalas/generate', data);\n      return response.json() as Promise<GenerateMandalaResponse>;\n    },\n    onMutate: () => {\n      setGenerationStatus('generating');\n      setGenerationError('');\n    },\n    onSuccess: (data) => {\n      setGeneratedMandala({\n        id: data.mandala.id,\n        imageUrl: data.mandala.imageUrl,\n        prompt: data.generatedPrompt,\n        revisedPrompt: data.revisedPrompt,\n        generationTime: 3.2 // This would come from the API in a real implementation\n      });\n      setGenerationStatus('completed');\n      \n      // Invalidate and refetch recent mandalas\n      queryClient.invalidateQueries({ queryKey: ['/api/mandalas/recent'] });\n      \n      toast({\n        title: \"Mandala Generated! ✨\",\n        description: \"Your personalized mandala has been created based on your thoughts and brain waves.\",\n      });\n    },\n    onError: (error) => {\n      setGenerationStatus('error');\n      setGenerationError(error instanceof Error ? error.message : 'Failed to generate mandala');\n      \n      toast({\n        title: \"Generation Failed\",\n        description: \"Sorry, we couldn't generate your mandala. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleGenerateMandala = (transcript: string) => {\n    if (!currentSession) {\n      toast({\n        title: \"Session Required\",\n        description: \"Please wait for the session to initialize.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!websocket.eegData) {\n      toast({\n        title: \"No Brain Wave Data\",\n        description: \"Please connect your NeuroSky headset first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateMandalaMutation.mutate({\n      voiceTranscript: transcript,\n      brainwaveData: websocket.eegData,\n      sessionId: currentSession.id\n    });\n  };\n\n  const handleConnectNeuroSky = () => {\n    websocket.connectNeuroSky();\n    toast({\n      title: \"Connecting to NeuroSky...\",\n      description: \"Please ensure your headset is powered on and paired via Bluetooth.\",\n    });\n  };\n\n  const handleDisconnectNeuroSky = () => {\n    websocket.disconnectNeuroSky();\n    toast({\n      title: \"Disconnected\",\n      description: \"NeuroSky headset has been disconnected.\",\n    });\n  };\n\n  const handleReset = async () => {\n    try {\n      // Clear all local state\n      setCurrentTranscript('');\n      setGeneratedMandala(null);\n      setGenerationStatus('idle');\n      setGenerationError('');\n\n      // Trigger voice input reset (stop recording and clear transcript)\n      setResetTrigger(prev => prev + 1);\n\n      // Clear all query cache\n      queryClient.clear();\n\n      // Create a new session\n      const response = await apiRequest('POST', '/api/sessions', {\n        attentionLevel: 0,\n        meditationLevel: 0,\n        signalQuality: 0\n      });\n      const newSession = await response.json();\n      setCurrentSession(newSession);\n\n      toast({\n        title: \"Reset Complete\",\n        description: \"All data cleared and new session created. Ready for a fresh start!\",\n      });\n    } catch (error) {\n      console.error('Failed to reset session:', error);\n      toast({\n        title: \"Reset Error\",\n        description: \"Failed to complete reset. Please refresh the page.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Particle Background */}\n      <div className=\"particles fixed inset-0 z-0\">\n        {Array.from({ length: 9 }, (_, i) => (\n          <div \n            key={i}\n            className=\"particle absolute w-0.5 h-0.5 bg-primary/60 rounded-full\"\n            style={{\n              left: `${(i + 1) * 10}%`,\n              animationDelay: `${i * 0.5}s`,\n              animationDuration: '6s',\n              animationName: 'particle-float',\n              animationIterationCount: 'infinite',\n              animationTimingFunction: 'linear'\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Header */}\n      <header className=\"relative z-10 bg-card/50 backdrop-blur-sm border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center\">\n                <span className=\"text-primary-foreground text-xl\">🧠</span>\n              </div>\n              <h1 className=\"text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                MindMandala\n              </h1>\n            </div>\n            \n            <nav className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\">About</a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\">Gallery</a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\">Settings</a>\n            </nav>\n\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2 px-3 py-1 rounded-full glass\">\n                <div className={`w-2 h-2 rounded-full ${\n                  websocket.neuroskyConnected ? 'bg-green-500' : 'bg-red-500'\n                }`} />\n                <span className=\"text-xs text-muted-foreground\">NeuroSky</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"relative z-10 px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl sm:text-4xl lg:text-6xl font-bold mb-4 sm:mb-6 px-2\">\n              Transform Your\n              <span className=\"bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n                {\" \"}Mind{\" \"}\n              </span>\n              into Art\n            </h2>\n            <p className=\"text-lg sm:text-xl text-muted-foreground mb-6 sm:mb-8 leading-relaxed max-w-3xl mx-auto px-4\">\n              Connect your NeuroSky headset, speak your thoughts, and watch as AI creates unique mandalas based on your brain waves and voice.\n            </p>\n          </div>\n\n          {/* Main Grid */}\n          <div className=\"grid lg:grid-cols-2 gap-6 lg:gap-8 mb-8 lg:mb-12\">\n            {/* Left Column: Controls and Status */}\n            <div className=\"space-y-4 lg:space-y-6\">\n              <DeviceStatus\n                websocket={websocket}\n                microphoneEnabled={true}\n                onConnectNeuroSky={handleConnectNeuroSky}\n                onDisconnectNeuroSky={handleDisconnectNeuroSky}\n              />\n\n              <BrainWaveVisualization data={websocket.eegData} />\n\n              <VoiceInput\n                onTranscriptChange={setCurrentTranscript}\n                onGenerateMandala={handleGenerateMandala}\n                isGenerating={generateMandalaMutation.isPending}\n                resetTrigger={resetTrigger}\n              />\n\n              {/* Reset Button */}\n              {(generatedMandala || currentTranscript) && (\n                <Card className=\"glass border-border/50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"text-sm font-medium text-foreground\">Start Fresh</h3>\n                        <p className=\"text-xs text-muted-foreground\">Clear all data and begin a new session</p>\n                      </div>\n                      <Button\n                        onClick={handleReset}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"ml-4 hover:bg-destructive/10 hover:border-destructive hover:text-destructive\"\n                        data-testid=\"button-reset-session\"\n                        disabled={generateMandalaMutation.isPending}\n                      >\n                        <RotateCcw className=\"w-4 h-4 mr-2\" />\n                        Reset\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            {/* Right Column: Mandala Display */}\n            <div className=\"space-y-4 lg:space-y-6\">\n              <MandalaDisplay\n                mandala={generatedMandala}\n                isGenerating={generateMandalaMutation.isPending}\n                generationStatus={generationStatus}\n                error={generationError}\n              />\n\n              {/* Recent Creations */}\n              {recentMandalas && recentMandalas.length > 0 && (\n                <Card className=\"glass border-border/50\">\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                      <span className=\"text-primary mr-3\">🎨</span>\n                      Recent Creations\n                    </h3>\n                    \n                    <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2 sm:gap-3\">\n                      {recentMandalas.slice(0, 6).map((mandala: Mandala) => (\n                        <div \n                          key={mandala.id}\n                          className=\"aspect-square bg-secondary/30 rounded-lg overflow-hidden cursor-pointer hover:scale-105 transition-transform\"\n                          data-testid={`img-recent-mandala-${mandala.id}`}\n                        >\n                          <img \n                            src={mandala.imageUrl}\n                            alt=\"Previous mandala creation\" \n                            className=\"w-full h-full object-cover\"\n                          />\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n\n          {/* How It Works Section */}\n          <section className=\"py-12\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-3xl lg:text-4xl font-bold mb-6\">\n                How It <span className=\"bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">Works</span>\n              </h2>\n              <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n                Experience the fusion of neuroscience and AI to create personalized spiritual art\n              </p>\n            </div>\n\n            <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-8\">\n              {/* Step 1 */}\n              <Card className=\"glass border-border/50 text-center p-6 lg:p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <span className=\"text-2xl text-primary-foreground\">🧠</span>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-4\">Connect Your Mind</h3>\n                <p className=\"text-muted-foreground\">\n                  Put on your NeuroSky headset and establish a connection to start reading your brain waves in real-time.\n                </p>\n              </Card>\n\n              {/* Step 2 */}\n              <Card className=\"glass border-border/50 text-center p-6 lg:p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-secondary to-accent rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <span className=\"text-2xl text-primary-foreground\">🎤</span>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-4\">Express Your Thoughts</h3>\n                <p className=\"text-muted-foreground\">\n                  Speak about your feelings, intentions, or anything that comes to mind while your brain activity is recorded.\n                </p>\n              </Card>\n\n              {/* Step 3 */}\n              <Card className=\"glass border-border/50 text-center p-6 lg:p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-accent to-primary rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <span className=\"text-2xl text-primary-foreground\">🎨</span>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-4\">Generate Art</h3>\n                <p className=\"text-muted-foreground\">\n                  AI combines your brain waves and voice to create a unique mandala that reflects your mental state and thoughts.\n                </p>\n              </Card>\n            </div>\n          </section>\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-card/50 backdrop-blur-sm border-t border-border py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"md:col-span-2\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center\">\n                  <span className=\"text-primary-foreground\">🧠</span>\n                </div>\n                <h3 className=\"text-xl font-bold\">MindMandala</h3>\n              </div>\n              <p className=\"text-muted-foreground mb-4\">\n                Transform your thoughts and brain waves into beautiful, personalized mandala art using cutting-edge AI technology.\n              </p>\n              <div className=\"flex space-x-4\">\n                <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                  <span className=\"text-xl\">🐦</span>\n                </a>\n                <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                  <span className=\"text-xl\">📧</span>\n                </a>\n                <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                  <span className=\"text-xl\">💬</span>\n                </a>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-4\">Resources</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Documentation</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">API Reference</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Tutorials</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Community</a></li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-4\">Support</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Help Center</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Contact Us</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Privacy Policy</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Terms of Service</a></li>\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"border-t border-border mt-8 pt-8 text-center text-muted-foreground\">\n            <p>&copy; 2025 MindMandala. All rights reserved. Made with ♥ for consciousness explorers.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":18401},"SCCP1910/fecart-15-09/MandalaMind/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"SCCP1910/fecart-15-09/MandalaMind/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}